<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于equals和hashcode方法</title>
    <link href="/2024/02/05/%E5%85%B3%E4%BA%8Eequals%E5%92%8Chashcode%E6%96%B9%E6%B3%95/"/>
    <url>/2024/02/05/%E5%85%B3%E4%BA%8Eequals%E5%92%8Chashcode%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>equals用于判断两个对象是否是同一个</p><p>hashcode用来快速判断对象是否相同（对象相同hashcode一定相同），还用于hashMap里的处理</p><h3 id="1-Object类中的方法"><a href="#1-Object类中的方法" class="headerlink" title="1. Object类中的方法"></a>1. Object类中的方法</h3><h4 id="1-1-hashcode"><a href="#1-1-hashcode" class="headerlink" title="1.1. hashcode"></a>1.1. hashcode</h4><p>调用native方法，在一定程度上返回内存地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="1-2-equals方法"><a href="#1-2-equals方法" class="headerlink" title="1.2. equals方法"></a>1.2. equals方法</h4><p>比较两个对象是否是同一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-String类中的方法"><a href="#2-String类中的方法" class="headerlink" title="2. String类中的方法"></a>2. String类中的方法</h3><h4 id="2-1-hashcode方法"><a href="#2-1-hashcode方法" class="headerlink" title="2.1. hashcode方法"></a>2.1. hashcode方法</h4><p>根据char数组计算出一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        &#125;<br>        hash = h;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-equals方法"><a href="#2-2-equals方法" class="headerlink" title="2.2. equals方法"></a>2.2. equals方法</h4><p>比较两个char数组是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == anObject) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">anotherString</span> <span class="hljs-operator">=</span> (String)anObject;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> value.length;<br>    <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>        <span class="hljs-type">char</span> v1[] = value;<br>        <span class="hljs-type">char</span> v2[] = anotherString.value;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，Object是无法获知String类型的，所以这个方法的入参是Object，在方法内再强制转换为String类。</p><h4 id="2-3-如果重写equals，但不重写hashcode方法？"><a href="#2-3-如果重写equals，但不重写hashcode方法？" class="headerlink" title="2.3. 如果重写equals，但不重写hashcode方法？"></a>2.3. 如果重写equals，但不重写hashcode方法？</h4><p>当char数组相同时，equals就会返回true。但此时的字符串未必指向同一个块内存，hashcode值可能不相同。在使用hashmap存储时，两个同样的string字符串就可能被放入不同的桶中。</p><h3 id="3-HashMap中Node的节点方法"><a href="#3-HashMap中Node的节点方法" class="headerlink" title="3. HashMap中Node的节点方法"></a>3. HashMap中Node的节点方法</h3><h4 id="3-1-hashcode方法"><a href="#3-1-hashcode方法" class="headerlink" title="3.1. hashcode方法"></a>3.1. hashcode方法</h4><p>对key和value的hashcode求异或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    ……<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);<br>    &#125;<br>    ……<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-equals方法"><a href="#3-2-equals方法" class="headerlink" title="3.2. equals方法"></a>3.2. equals方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    ……<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Map.Entry) &#123;<br>            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;<br>            <span class="hljs-keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;<br>                Objects.equals(value, e.getValue()))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    ……<br>&#125;<br></code></pre></td></tr></table></figure><p>比较key是否equals，value是否equals。</p><p>注意，这里调用到Objects类的子类重写方法。</p><h3 id="4-UUID中的方法"><a href="#4-UUID中的方法" class="headerlink" title="4. UUID中的方法"></a>4. UUID中的方法</h3><h4 id="4-1-hashcode方法"><a href="#4-1-hashcode方法" class="headerlink" title="4.1. hashcode方法"></a>4.1. hashcode方法</h4><p>UUID是128位值，但hashcode只有32位。这里把UUID分成高64位和低64位，将高低都纳入计算。</p><p>hilo是高位异或低位。hito右移32位后截断，然后跟hilo本身异或，也就是拿它自己的左右两边异或，得到一个32位字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">hilo</span> <span class="hljs-operator">=</span> mostSigBits ^ leastSigBits;<br>    <span class="hljs-keyword">return</span> ((<span class="hljs-type">int</span>)(hilo &gt;&gt; <span class="hljs-number">32</span>)) ^ (<span class="hljs-type">int</span>) hilo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-equals方法"><a href="#4-2-equals方法" class="headerlink" title="4.2. equals方法"></a>4.2. equals方法</h4><p>高64位与低64位相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-literal">null</span> == obj) || (obj.getClass() != UUID.class))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">UUID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> (UUID)obj;<br>    <span class="hljs-keyword">return</span> (mostSigBits == id.mostSigBits &amp;&amp;<br>            leastSigBits == id.leastSigBits);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-nameUUIDFromBytes"><a href="#4-3-nameUUIDFromBytes" class="headerlink" title="4.3. nameUUIDFromBytes"></a>4.3. nameUUIDFromBytes</h4><p>根据输入的字节数组生成uuid，使用md5算法，跟hashcode无关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UUID <span class="hljs-title function_">nameUUIDFromBytes</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] name)</span> &#123;<br>    MessageDigest md;<br>    <span class="hljs-keyword">try</span> &#123;<br>        md = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException nsae) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalError</span>(<span class="hljs-string">&quot;MD5 not supported&quot;</span>, nsae);<br>    &#125;<br>    <span class="hljs-type">byte</span>[] md5Bytes = md.digest(name);<br>    md5Bytes[<span class="hljs-number">6</span>]  &amp;= <span class="hljs-number">0x0f</span>;  <span class="hljs-comment">/* clear version        */</span><br>    md5Bytes[<span class="hljs-number">6</span>]  |= <span class="hljs-number">0x30</span>;  <span class="hljs-comment">/* set to version 3     */</span><br>    md5Bytes[<span class="hljs-number">8</span>]  &amp;= <span class="hljs-number">0x3f</span>;  <span class="hljs-comment">/* clear variant        */</span><br>    md5Bytes[<span class="hljs-number">8</span>]  |= <span class="hljs-number">0x80</span>;  <span class="hljs-comment">/* set to IETF variant  */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UUID</span>(md5Bytes);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>策略模式学习笔记</title>
    <link href="/2024/01/03/20240103-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/01/03/20240103-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>策略模式的介绍可以在网上查到，所以在这里不作介绍，仅记录自己的想法和测试用例。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p><img src="/img/20240103-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.jpg" alt="img"></p><p>策略模式有一个环境类，提供环境信息，装配不同的策略。</p><p>使用策略模式可以干掉繁琐的if和switch，把判断内嵌在环境类中。当共同方法越多，策略模式的优点越明显，可以做到一次选择，直接使用。</p><p>【在同一个环境类中选择多个策略】策略模式可以有一个优化。它的环境类会根据上下文选择不同的具体策略，我们有时候可能需要选择两类策略，两类策略的抽象接口都不一样，通过环境类解析装配到环境类里，接着一个个调用。</p><p>【策略跟模板方法模式混合】策略模式也可以跟模板方法模式混合。策略模式需要定义一个抽象接口，具体的策略类要实现这个接口。但我们可以定义出抽象接口以后，继承抽象接口写一个抽象类，在方法里规定它需要调用的小方法，再把小方法放到具体实现类里实现。</p><h4 id="策略模式跟简单工厂的区别"><a href="#策略模式跟简单工厂的区别" class="headerlink" title="策略模式跟简单工厂的区别"></a>策略模式跟简单工厂的区别</h4><p>简单工厂的实现类是一次性的，每次生成新的实例。但策略模式的具体实现类可以不是一次性的，每次都装配那几个固定实例。</p><h4 id="策略模式跟模板方法模式的区别"><a href="#策略模式跟模板方法模式的区别" class="headerlink" title="策略模式跟模板方法模式的区别"></a>策略模式跟模板方法模式的区别</h4><p>策略模式的使用需要有一个环境类来做帮手，通过环境类屏蔽所有具体实现。而模板方法模式则是直接使用具体类，只是程序员在写代码时需要遵循一些规则罢了。</p><h4 id="策略模式跟享元模式的区别"><a href="#策略模式跟享元模式的区别" class="headerlink" title="策略模式跟享元模式的区别"></a>策略模式跟享元模式的区别</h4><p>策略模式的要点在于环境类，对于不同环境类会装配不同的策略。而享元模式重点在于类的拿取，并不关注现在的环境。</p><h4 id="【例子】策略模式的简单举例"><a href="#【例子】策略模式的简单举例" class="headerlink" title="【例子】策略模式的简单举例"></a>【例子】策略模式的简单举例</h4><p>下面是一个策略模式的简单举例，通过StrategyEnv持有环境信息，装配不同的InterestStrategy。拓展时，需要改写StrategyEnv类和新增InterestStrategy类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> src.test.com.channon.designPattern;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterestCalculationByStrategyPattern</span> &#123;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyEnv</span>&#123;<br>        <span class="hljs-keyword">private</span> InterestStrategy strategy;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> originAmount;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> duration;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">StrategyEnv</span><span class="hljs-params">(<span class="hljs-type">int</span> originAmount, <span class="hljs-type">int</span> duration)</span>&#123;<br>            <span class="hljs-built_in">this</span>.originAmount = originAmount;<br>            <span class="hljs-built_in">this</span>.duration = duration;<br>            <span class="hljs-keyword">if</span>(originAmount &gt; <span class="hljs-number">10000</span>)&#123;<br>                strategy = BigInterestStrategy.getInstance();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                strategy = SmallInterestStrategy.getInstance();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculateInterest</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> strategy.getInterest(originAmount, duration);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterestStrategy</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getInterest</span><span class="hljs-params">(<span class="hljs-type">int</span> originAmount, <span class="hljs-type">int</span> duration)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigInterestStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterestStrategy</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BigInterestStrategy instance;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">BigInterestStrategy</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 私有构造函数</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> BigInterestStrategy <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInterestStrategy</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getInterest</span><span class="hljs-params">(<span class="hljs-type">int</span> originAmount, <span class="hljs-type">int</span> duration)</span> &#123;<br>            <span class="hljs-keyword">return</span> originAmount * Math.pow(<span class="hljs-number">1.03</span>, duration);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallInterestStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterestStrategy</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SmallInterestStrategy instance;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">SmallInterestStrategy</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 私有构造函数</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> SmallInterestStrategy <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmallInterestStrategy</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getInterest</span><span class="hljs-params">(<span class="hljs-type">int</span> originAmount, <span class="hljs-type">int</span> duration)</span> &#123;<br>            <span class="hljs-keyword">return</span> originAmount * Math.pow(<span class="hljs-number">1.01</span>, duration);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">originAmount</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">StrategyEnv</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyEnv</span>(originAmount, duration);<br>        System.out.println(env.calculateInterest());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="【例子】复杂的策略模式"><a href="#【例子】复杂的策略模式" class="headerlink" title="【例子】复杂的策略模式"></a>【例子】复杂的策略模式</h4><p>策略模式混合模板方法模式。TaskExecutorChooser获取环境数据并装配相应的fetcher、parser、sender。而fetcher、parser、sender因为是通用的方法，我希望它们执行处理、存进数据库、调起下一个任务。所以它们可以有一个共同的抽象父类AbstractTask，在AbstractTask里写好流程，把每一小步的具体实现留给子类。</p><p>这段代码还可以进一步优化，将创建出来的具体Fetcher、Parser、Sender交给Spring管理，或者使用享元模式管理，避免重复创建类造成的开销。但这里就偷个懒，不再作修改了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> src.test.com.channon.designPattern.strategyPattern;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.exceptions.MySQLDataException;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.time.Instant;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileParserByStrategyPattern</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 可用 cronjob 唤起</span><br>        <span class="hljs-type">TaskExecutorChooser</span> <span class="hljs-variable">chooser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskExecutorChooser</span>(<span class="hljs-string">&quot;[Parser File]&quot;</span>);<br>        chooser.doExecution();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskExecutorChooser</span>&#123;<br>    TaskExecutor fetcher;<br>    TaskExecutor parser;<br>    TaskExecutor sender;<br>    String data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TaskExecutorChooser</span><span class="hljs-params">(String data)</span>&#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br><br>        <span class="hljs-comment">// 装配executor</span><br>        fetcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FetcherOne</span>();<br>        parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParserOne</span>();<br>        sender = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SenderOne</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doExecution</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(data + <span class="hljs-string">&quot; started at &quot;</span> + Instant.now());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fetcherData</span> <span class="hljs-operator">=</span> fetcher.doTask(data);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parserData</span> <span class="hljs-operator">=</span> parser.doTask(fetcherData);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">senderData</span> <span class="hljs-operator">=</span> sender.doTask(parserData);<br>        System.out.println(data + <span class="hljs-string">&quot; finished at &quot;</span> + Instant.now());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskExecutor</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doTask</span><span class="hljs-params">(String data)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">duplicateException</span><span class="hljs-params">(Exception e)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNextTask</span><span class="hljs-params">(String data)</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TaskExecutor</span>&#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doTask</span><span class="hljs-params">(String data)</span>&#123;<br>        <span class="hljs-comment">// preProcess</span><br>        List&lt;Object&gt; afterPre = preProcess(data);<br>        <span class="hljs-comment">// doProcess</span><br>        List&lt;Object&gt; midProcess = doProcess(afterPre);<br><br>        <span class="hljs-comment">// save into database</span><br>        <span class="hljs-keyword">if</span>(midProcess == <span class="hljs-literal">null</span> || midProcess.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(Object o: midProcess)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                saveData(o);<br>            &#125; <span class="hljs-keyword">catch</span> (MySQLDataException e)&#123;<br>                duplicateException(e);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>                <span class="hljs-keyword">throw</span> e;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// midProcess</span><br>        afterProcess(midProcess);<br><br>        createNextTask(data);<br><br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">preProcess</span><span class="hljs-params">(String data)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">doProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span> <span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> MySQLDataException;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">afterProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">duplicateException</span><span class="hljs-params">(Exception e)</span>&#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNextTask</span><span class="hljs-params">(String data)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 操纵数据库</span><br>            System.out.println(<span class="hljs-string">&quot;Save &quot;</span>+data+<span class="hljs-string">&quot;&#x27;s next task in database.&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FetcherOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTask</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">preProcess</span><span class="hljs-params">(String data)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;FetcherOne do preProcess&quot;</span>);<br>        ArrayList&lt;String&gt; objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        objects.add(data);<br>        <span class="hljs-keyword">return</span> Collections.singletonList(objects);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">doProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;FetcherOne do doProcess&quot;</span>);<br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> MySQLDataException &#123;<br>        System.out.println(<span class="hljs-string">&quot;FetcherOne do saveData&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">afterProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;FetcherOne do afterProcess&quot;</span>);<br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParserOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTask</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">preProcess</span><span class="hljs-params">(String data)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ParserOne do preProcess&quot;</span>);<br>        ArrayList&lt;String&gt; objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        objects.add(data);<br>        <span class="hljs-keyword">return</span> Collections.singletonList(objects);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">doProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ParserOne do doProcess&quot;</span>);<br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> MySQLDataException &#123;<br>        System.out.println(<span class="hljs-string">&quot;ParserOne do saveData&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">afterProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ParserOne do afterProcess&quot;</span>);<br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SenderOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTask</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">preProcess</span><span class="hljs-params">(String data)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SenderOne do preProcess&quot;</span>);<br>        ArrayList&lt;String&gt; objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        objects.add(data);<br>        <span class="hljs-keyword">return</span> Collections.singletonList(objects);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">doProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SenderOne do doProcess&quot;</span>);<br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> MySQLDataException &#123;<br>        System.out.println(<span class="hljs-string">&quot;SenderOne do saveData&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">afterProcess</span><span class="hljs-params">(List&lt;Object&gt; objects)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SenderOne do afterProcess&quot;</span>);<br>        <span class="hljs-keyword">return</span> objects;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain">[Parser File] started at 2024-01-02T16:55:55.264Z<br>FetcherOne do preProcess<br>FetcherOne do doProcess<br>FetcherOne do saveData<br>FetcherOne do afterProcess<br>Save [Parser File]&#x27;s next task in database.<br>ParserOne do preProcess<br>ParserOne do doProcess<br>ParserOne do saveData<br>ParserOne do afterProcess<br>Save [Parser File]&#x27;s next task in database.<br>SenderOne do preProcess<br>SenderOne do doProcess<br>SenderOne do saveData<br>SenderOne do afterProcess<br>Save [Parser File]&#x27;s next task in database.<br>[Parser File] finished at 2024-01-02T16:55:55.272Z<br></code></pre></td></tr></table></figure><h4 id="【例子】装配不定量策略类的策略模式"><a href="#【例子】装配不定量策略类的策略模式" class="headerlink" title="【例子】装配不定量策略类的策略模式"></a>【例子】装配不定量策略类的策略模式</h4><p>​有一些情况需要根据环境信息装配不定量的具体类。每个处理器（具体策略类）都有相同的输入和输出类型，并且它们按顺序链接在一起进行处理。这样，每个处理器都有机会处理数据，并将处理后的结果传递给下一个处理器。这有点参考责任链模式的思想，但并不是责任链模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> src.test.com.channon.designPattern.strategyPattern;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataWashByStrategyPattern</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DataWasher</span> <span class="hljs-variable">washer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataWasher</span>(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>        washer.doProcessor();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataWasher</span>&#123;<br>    List&lt;Processor&gt; processors;<br>    String env;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DataWasher</span><span class="hljs-params">(String env)</span>&#123;<br>        <span class="hljs-built_in">this</span>.env = env;<br>        processors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 可根据环境信息配置，不用写死</span><br>        processors.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LowerCaseProcessor</span>());<br>        processors.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Appender</span>(<span class="hljs-string">&#x27;c&#x27;</span>));<br>        processors.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Appender</span>(<span class="hljs-string">&#x27;a&#x27;</span>));<br>        processors.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Replacer</span>(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doProcessor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span>(Processor p:processors)&#123;<br>            env = p.process(env);<br>        &#125;<br>        System.out.println(env);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Processor</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String data)</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">process</span><span class="hljs-params">(String data)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LowerCaseProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Processor</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">return</span> data.length() &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">process</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">if</span>(isMatch(data))&#123;<br>            <span class="hljs-keyword">return</span> data.toLowerCase();<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Replacer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Processor</span>&#123;<br><br>    <span class="hljs-type">char</span> origin;<br>    <span class="hljs-type">char</span> post;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Replacer</span><span class="hljs-params">(<span class="hljs-type">char</span> origin, <span class="hljs-type">char</span> post)</span>&#123;<br>        <span class="hljs-built_in">this</span>.origin = origin;<br>        <span class="hljs-built_in">this</span>.post = post;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">return</span> data.contains(Character.toString(origin));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">process</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">if</span>(isMatch(data))&#123;<br>            <span class="hljs-keyword">return</span> data.replace(origin, post);<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Appender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Processor</span>&#123;<br><br>    <span class="hljs-type">char</span> ch;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Appender</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span>&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">process</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">if</span>(isMatch(data))&#123;<br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(data);<br>            sb.append(ch);<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>《Java与模式》 阎宏</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式服务架构注意点——《可伸缩服务架构：框架与中间件》读书笔记</title>
    <link href="/2023/12/29/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/29/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>这是一本非常详尽的工具书，可以直接对照着做需求开发。里面给出了一些案例分析，可以作为设计时候的参考，当练习题使用。唯一可抱怨的点是，这本书有一些源码解析，需要非常花时间深研，这跟我想要直接看本工具书的预期不符，我会直接掠过。</p><p>我这里的笔记仅给我自己看，具体例子可以见书中例子，也可结合大家自己的开发经验分析，我就不作举例了。</p><h3 id="1-分布式服务中的发号器"><a href="#1-分布式服务中的发号器" class="headerlink" title="1. 分布式服务中的发号器"></a>1. 分布式服务中的发号器</h3><h4 id="1-1-要求"><a href="#1-1-要求" class="headerlink" title="1.1. 要求"></a>1.1. 要求</h4><p><strong>时间粗略有序</strong></p><p>​时间粗略有序是为了保证存储、查询方便。并不要求完全有序。</p><p><strong>可反解</strong></p><p>​通过序号可以了解一定的业务信息。如序号来源，业务系统等。</p><p><strong>可制造性</strong></p><p>​可重复生成，以免处理差错数据时无法恢复。数据库自增主键就不满足这一要求。</p><p><strong>全局唯一</strong></p><p>​分布式系统的基本要求。</p><h4 id="1-2-方案"><a href="#1-2-方案" class="headerlink" title="1.2. 方案"></a>1.2. 方案</h4><p><strong>数据库自增主键</strong></p><p>​无法满足可制造性。在分库分表中会比较麻烦。</p><p><strong>业务层主键（乐观锁，业务代码处理）</strong></p><p>​在分库分表中会比较麻烦</p><p><strong>雪花算法</strong></p><p><strong>自研发号器</strong></p><h4 id="1-3-自制发号器的发布模式"><a href="#1-3-自制发号器的发布模式" class="headerlink" title="1.3. 自制发号器的发布模式:"></a>1.3. 自制发号器的发布模式:</h4><p>1 嵌入发布。需要提前配置本机ID</p><p>2 中心服务器发布。提供服务的客户端jar包，通过客户端调用中心服务器。</p><p>3 rest发布。通过restful api对外发放号码。</p><h4 id="1-4-自制发号器的ID类型"><a href="#1-4-自制发号器的ID类型" class="headerlink" title="1.4. 自制发号器的ID类型"></a>1.4. 自制发号器的ID类型</h4><p> 1 最大峰值型。秒级有序，能承受更大的峰值压力，但是粗略有序的粒度有点大。</p><p> 2 最小粒度型。理论峰值有限。但是更加有序。</p><h4 id="1-5-自制发号器的瓶颈"><a href="#1-5-自制发号器的瓶颈" class="headerlink" title="1.5. 自制发号器的瓶颈:"></a>1.5. 自制发号器的瓶颈:</h4><p>不涉及本地io，内存+网络io为主。在网络io中，cpu计算速度是瓶颈，因此使用多线程。</p><p>Time和sequence是竞争点。</p><p> 用reentrantlock，性能和稳定的平衡。</p><p> 用synchronized，性能最差。</p><p> 用原子变量，性能非常高。</p><h3 id="2-数据库设计"><a href="#2-数据库设计" class="headerlink" title="2. 数据库设计"></a>2. 数据库设计</h3><h4 id="2-1-数据库分库分表的三种方案"><a href="#2-1-数据库分库分表的三种方案" class="headerlink" title="2.1. 数据库分库分表的三种方案"></a>2.1. 数据库分库分表的三种方案</h4><h5 id="2-1-1-客户端分片"><a href="#2-1-1-客户端分片" class="headerlink" title="2.1.1. 客户端分片"></a>2.1.1. 客户端分片</h5><p>  11 应用层直接实现。打包一个jar包在应用层调用</p><p>  12 jdbc层实现。sharding jdbc，对业务方透明。</p><p>  13 通过orm框架实现。jpa是一种orm框架，mybatis不算是。</p><h5 id="2-1-2-代理分片-Cobar，Mycat"><a href="#2-1-2-代理分片-Cobar，Mycat" class="headerlink" title="2.1.2. 代理分片 Cobar，Mycat"></a>2.1.2. 代理分片 Cobar，Mycat</h5><h5 id="2-1-3-支持事务的分布式数据库-如TiDB"><a href="#2-1-3-支持事务的分布式数据库-如TiDB" class="headerlink" title="2.1.3. 支持事务的分布式数据库 如TiDB"></a>2.1.3. 支持事务的分布式数据库 如TiDB</h5><h4 id="2-2-分库分表的架构设计"><a href="#2-2-分库分表的架构设计" class="headerlink" title="2.2. 分库分表的架构设计"></a>2.2. 分库分表的架构设计</h4><h5 id="2-2-1-垂直切分数据库的考虑"><a href="#2-2-1-垂直切分数据库的考虑" class="headerlink" title="2.2.1. 垂直切分数据库的考虑:"></a>2.2.1. 垂直切分数据库的考虑:</h5><p>1 冷热分离，动静分离 </p><p>2 易于拓展 </p><p>3 部分业务表无法关联 </p><p>4 存在单库性能瓶颈</p><h5 id="2-2-2-水平切分数据库的考虑"><a href="#2-2-2-水平切分数据库的考虑" class="headerlink" title="2.2.2. 水平切分数据库的考虑:"></a>2.2.2. 水平切分数据库的考虑:</h5><p>1 应用层改造较少，只用增加路由规则 </p><p>2 单库单表数据保持在一定量级 </p><p>3 很难实现join </p><p>4 分片事务的一致性难以解决 </p><p>5 数据扩容的难度和维护量大</p><p>另外，水平切片的方案: 1 按照hash切片 2 按照时间切片</p><h4 id="2-3-分库分表的扩容方案"><a href="#2-3-分库分表的扩容方案" class="headerlink" title="2.3. 分库分表的扩容方案"></a>2.3. 分库分表的扩容方案</h4><p>1 对新旧数据库进行双写（如果是动静数据，可以拉长双写时间，最后只迁移静态数据）</p><p>2 将双写前的旧历史数据写入新的数据库</p><p>3 将旧查询规则改为新的查询规则</p><p>4 将双写逻辑下线，只留新的规则</p><p>5 删除旧历史数据</p><h4 id="2-4-分库分表导致的查询问题"><a href="#2-4-分库分表导致的查询问题" class="headerlink" title="2.4. 分库分表导致的查询问题"></a>2.4. 分库分表导致的查询问题</h4><p>1 多个分片表查询后合并数据集，效率低</p><p>2 记录多份数据，效率高</p><p>3 搜索引擎查询。没用过</p><h3 id="3-如何引入消息队列"><a href="#3-如何引入消息队列" class="headerlink" title="3. 如何引入消息队列"></a>3. 如何引入消息队列</h3><h4 id="3-1-线程模型"><a href="#3-1-线程模型" class="headerlink" title="3.1. 线程模型"></a>3.1. 线程模型</h4><h5 id="3-1-1-同步模型"><a href="#3-1-1-同步模型" class="headerlink" title="3.1.1. 同步模型"></a>3.1.1. 同步模型</h5><p>客户端为每个消费者流使用一个线程，每个线程负责从Kafka队列里消费消息，并且在同一个线程里处理业务。线程池里的线程数跟消费者数一致。</p><h5 id="3-1-2-异步模型"><a href="#3-1-2-异步模型" class="headerlink" title="3.1.2. 异步模型"></a>3.1.2. 异步模型</h5><p>客户端为每个消费者流使用一个线程，每个线程负责从Kafka队列里消费消息，并且传递消费得到的消息到后端的异步线程池中，前面负责消费消息的线程池称为消息消费线程池，把后面的异步线程池称为异步业务线程池。</p><p>后端的异步业务线程池又细分为所有消费者流共享线程池和每个流独享线程池。</p><p><strong>共享线程池</strong></p><p>区分partition来分大客户和散客，但共用一个线程池处理任务，无法给大客户派优先级，可能导致大客户任务饿死。</p><p><strong>独享线程池</strong></p><p>创建多个线程池，使用更多内存</p><p>允许不同的流（区）不均衡</p><h4 id="3-2-异常处理"><a href="#3-2-异常处理" class="headerlink" title="3.2. 异常处理"></a>3.2. 异常处理</h4><p>使用拦截器进行异常处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvide</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span>&#123;<br>    <span class="hljs-meta">@ExceptionHandler(ApiException.class)</span><br>    <span class="hljs-keyword">public</span> ApiResult <span class="hljs-title function_">handlerApiException</span><span class="hljs-params">(ApiException e)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiResult</span>(e.getExCode(), e.getExMsg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ApiResult <span class="hljs-title function_">handlerApiException</span><span class="hljs-params">(Exception e)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiResult</span>(e.getMessagel);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可打印日志以备后续恢复数据。</p><h4 id="3-3-优雅关机"><a href="#3-3-优雅关机" class="headerlink" title="3.3. 优雅关机"></a>3.3. 优雅关机</h4><p><strong>如何知道JVM要退出</strong></p><p>JVM在收到退出信号后，会调用注册的钩子，我们通过注册JVM退出钩子进行优雅关机。</p><p><strong>如果Worker线程处于阻塞状态，则如何唤醒并退出？</strong></p><p>需要中断线程以退出，这时会产生一个InterruptedException，在异常处理的默认处理器中被捕捉并写入错误日志，Worker线程随后退出。</p><h3 id="4-分布式定时任务"><a href="#4-分布式定时任务" class="headerlink" title="4. 分布式定时任务"></a>4. 分布式定时任务</h3><p>● 抢占式：顾名思义，就是谁先获得资源谁就能执行，这种模式无法将单个任务的数据交给其他节点协同处理，一般用于处理数据量较小、任务较多的场景下。</p><p>● 协同式：可以将单个任务处理的数据均分到多个JVM中处理，提高数据的并行处理能力，能够充分利用计算机资源。</p><h4 id="4-1-分布式任务框架的要点"><a href="#4-1-分布式任务框架的要点" class="headerlink" title="4.1. 分布式任务框架的要点"></a>4.1. 分布式任务框架的要点</h4><p>● 高可用性：没有单点风险</p><p>● 可伸缩性：支持弹性伸缩，可以动态增加、删除节点</p><p>● 负载均衡：通过集群的方式进行管理调度，可以有效地利用资源，达到负载均衡的效果。</p><p>● 失效转移：持久化数据，同时有完善的任务失败重做机制和详细的任务跟踪及告警策略</p><h4 id="4-2-分布式锁的实现方式"><a href="#4-2-分布式锁的实现方式" class="headerlink" title="4.2. 分布式锁的实现方式"></a>4.2. 分布式锁的实现方式</h4><p>(1)基于数据库的实现方式该实现方式完全依靠数据库的唯一索引来实现，当想要获得锁时，便向数据库中插入一条记录，成功插入则获得锁，执行完成后删除对应的行数据来释放锁。</p><p>(2)基于Redis的实现方式这基于Redis的setnx命令实现的，当缓存里的key不存在时，才会设置成功，并且返回true，否则直接返回false。如果返回true，则表示获取到了锁，否则获取锁失败。为了防止死锁，我们再使用expire命令对这个key设置一个超时时间。</p><p>(3)基于ZooKeeper的实现方式ZooKeeper是一个为分布式应用提供一致性服务的开源组件，它内部是一个分层的文件系统目录树结构，规定在同一个目录下只能有一个唯一文件名。</p><h4 id="4-3-Quartz框架介绍"><a href="#4-3-Quartz框架介绍" class="headerlink" title="4.3. Quartz框架介绍"></a>4.3. Quartz框架介绍</h4><p><img src="/img/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/01.jpg" alt="img"></p><ol><li>Quartz应用通过数据库表来感知另一个应用的存在</li><li>Quartz通过数据库实现分布式锁机制</li><li>在Quartz中可以手动设置线程池大小</li></ol><p>线程池有默认大小，如果同时执行的任务太多，会在线程池里排队，导致错过执行时间。</p><ol><li>定时任务被错过执行(misfired)，可以在Trigger里定义处理方法</li><li>Quartz无法定义任务的先后顺序</li><li>其缺点是抢占式，同一次任务触发只能在一个节点上执行，其他节点不能并行执行该任务</li><li>可定时</li></ol><h4 id="4-4-TBSchedule"><a href="#4-4-TBSchedule" class="headerlink" title="4.4. TBSchedule"></a>4.4. TBSchedule</h4><ol><li>使用zk来进行统一管理</li><li>执行器通过临时节点注册到zk上，临时节点宕机就断开连接</li><li>可以对任务进行分片</li><li>不可定时</li><li>不支持顺序执行任务</li></ol><h4 id="4-5-Elastic-Job"><a href="#4-5-Elastic-Job" class="headerlink" title="4.5. Elastic-Job"></a>4.5. Elastic-Job</h4><ol><li>用zk实现注册中心。</li><li>可分片执行。</li><li>它没有作业调度中心节点，而是基于部署作业框架的程序在到达相应时间点时各自触发调度。注册中心仅用于作业注册和监控信息存储。而主作业节点仅用于处理分片和清理等功能。</li><li>定制化流程任务。可高吞吐，可顺序处理。</li><li>现有的Job实例下线，如果下线的是Leader节点，则先选举再触发分片算法的执行。</li></ol><h3 id="5-分布式系统中的缓存"><a href="#5-分布式系统中的缓存" class="headerlink" title="5. 分布式系统中的缓存"></a>5. 分布式系统中的缓存</h3><p><img src="/img/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/02.jpg" alt="img">)</p><h4 id="5-1-一个例子"><a href="#5-1-一个例子" class="headerlink" title="5.1. 一个例子"></a>5.1. 一个例子</h4><p>假设要做一个12306的系统，支持10 000&#x2F;s的查询</p><p>(1)假设Tomcat的吞吐量为5000&#x2F;s，则Tomcat台数&#x3D;100000&#x2F;5000&#x3D;20台。</p><p>(2)假设Redis的吞吐量为50000&#x2F;s，则Redis台数&#x3D;100000&#x2F;50000&#x3D;2台。</p><p>(3)假设MySQL的查询吞吐量为1000&#x2F;s，列车总量为3000辆，缓存5秒过期，余票查询操作在5秒内给数据库传递的访问量最多为3000&#x2F;5s&#x3D;600&#x2F;s，MySQL台数&#x3D;600&#x2F;1000 ≈ 1台。</p><p>我们针对查询系统允许有5秒的时间窗口，也就是系统可以提供不超过5秒的不一致行为，这样就可以设计分布式缓存来提高性能，化解海量查询请求带来的系统压力。</p><h4 id="5-2-常用的缓存中间件"><a href="#5-2-常用的缓存中间件" class="headerlink" title="5.2. 常用的缓存中间件"></a>5.2. 常用的缓存中间件</h4><p><img src="/img/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/03.jpg" alt="img"></p><h5 id="5-2-1-关于Redis"><a href="#5-2-1-关于Redis" class="headerlink" title="5.2.1. 关于Redis"></a>5.2.1. 关于Redis</h5><ol><li>单线程，不适用面对大内存、大量计算时的场景</li><li>可持久化</li><li>提供了丰富的数据淘汰策略</li><li>集群分片，使用hash槽</li></ol><h4 id="5-3-应用层访问缓存的模式"><a href="#5-3-应用层访问缓存的模式" class="headerlink" title="5.3. 应用层访问缓存的模式"></a>5.3. 应用层访问缓存的模式</h4><ol><li>双读双写</li></ol><p><img src="/img/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/04.jpg" alt="img">)</p><ol><li>异步更新</li></ol><p><img src="/img/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/05.jpg" alt="img">)</p><ol><li>串联模式</li></ol><p><img src="/img/20231229-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%B3%A8%E6%84%8F%E7%82%B9%E2%80%94%E2%80%94%E3%80%8A%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%A1%86%E6%9E%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/06.jpg" alt="img"></p><h4 id="5-4-分布式缓存的迁移方案"><a href="#5-4-分布式缓存的迁移方案" class="headerlink" title="5.4. 分布式缓存的迁移方案"></a>5.4. 分布式缓存的迁移方案</h4><h5 id="5-4-1-平滑迁移"><a href="#5-4-1-平滑迁移" class="headerlink" title="5.4.1. 平滑迁移"></a>5.4.1. 平滑迁移</h5><p>平滑迁移使用的是双写方案，方案分成4个步骤：双写、迁移历史数据、切读、下双写。</p><p>在这个过程中，我们需要迁移历史数据，在迁移的过程中可能需要迁移工具，这也需要一部分开发工作量。在迁移后，我们还需要对迁移的数据进行验证，表明我们的数据迁移成功。</p><h5 id="5-4-2-停机迁移"><a href="#5-4-2-停机迁移" class="headerlink" title="5.4.2. 停机迁移"></a>5.4.2. 停机迁移</h5><p>停机迁移的方法比较简单，通常分为停止应用、迁移历史数据、更改应用的数据源、启动应用这4个步骤</p><h4 id="5-5-缓存相关的设计要点"><a href="#5-5-缓存相关的设计要点" class="headerlink" title="5.5. 缓存相关的设计要点"></a>5.5. 缓存相关的设计要点</h4><p>(1)先对缓存需要做的容量进行估计</p><p>● 缓存内容的大小</p><p>● 缓存内容的数量</p><p>● 淘汰策略</p><p>● 缓存的数据结构</p><p>● 每秒的读峰值</p><p>● 每秒的写峰值</p><p>(2)整个设计过程中需要考虑的点</p><p>● 线程模型</p><p>● 预热方法</p><p>● 缓存分片</p><p>● 冷热数据的比例</p><p>(3)注意事项</p><p>● 是否有可能发生缓存穿透</p><p>● 是否有大对象</p><p>● 是否使用缓存实现分布式锁</p><p>● 是否使用缓存支持的脚本(Lua)</p><p>● 是否避免了Race Condition</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Bitcoin ——《精通区块链编程》读书笔记</title>
    <link href="/2023/12/25/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/25/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>原书逻辑清晰，讲解详尽，大家有兴趣可以去看看原书。我这里只是试着用自己的话描述一遍原书的内容。另外，这本书的标题有点让人迷惑，其实它讲的不是区块链，而是从各方面详尽地介绍了比特币，内容涵盖简单说明、开发包、常用网站、比特币标准和周边衍生物，是一本比特币的全面指南。</p><h3 id="1-参考资料"><a href="#1-参考资料" class="headerlink" title="1. 参考资料"></a>1. 参考资料</h3><h4 id="1-1-比特币浏览器"><a href="#1-1-比特币浏览器" class="headerlink" title="1.1. 比特币浏览器"></a>1.1. 比特币浏览器</h4><p>Bitcoin Block Explorer（<a href="https://blockexplorer.com)/">https://blockexplorer.com）</a></p><p>BlockCypher Explorer（<a href="https://live.blockcypher.com)/">https://live.blockcypher.com）</a></p><p>blockchain.info（<a href="https://blockchain.info)/">https://blockchain.info）</a></p><p>BitPay Insight（<a href="https://insight.bitpay.com)/">https://insight.bitpay.com）</a></p><h4 id="1-2-比特币价格查询"><a href="#1-2-比特币价格查询" class="headerlink" title="1.2. 比特币价格查询"></a>1.2. 比特币价格查询</h4><p>Bitcoin Average（<a href="http://bitcoinaverage.com/%EF%BC%89%E8%83%BD%E6%8F%90%E4%BE%9B%E5%85%B3%E4%BA%8E%E6%AF%8F%E4%B8%AA%E8%B4%A7%E5%B8%81%E7%9A%84%E6%88%90%E4%BA%A4%E9%87%8F%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87%E5%80%BC%E7%9A%84%E8%A7%86%E5%9B%BE%E3%80%82">http://bitcoinaverage.com/）能提供关于每个货币的成交量加权平均值的视图。</a></p><p>CoinCap（<a href="http://coincap.io/%EF%BC%89%E8%AF%A5%E7%BD%91%E7%AB%99%E5%88%97%E5%87%BA%E4%BA%86%E6%95%B0%E7%99%BE%E7%A7%8D%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%EF%BC%88%E5%8C%85%E6%8B%AC%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%89%E7%9A%84%E5%B8%82%E5%80%BC%E5%92%8C%E6%B1%87%E7%8E%87%E3%80%82">http://coincap.io/）该网站列出了数百种加密货币（包括比特币）的市值和汇率。</a></p><p>Chicago Mercantile Exchange Bitcoin Reference Rate（<a href="http://bit.ly/cmebrr%EF%BC%89">http://bit.ly/cmebrr）</a></p><h4 id="1-3-比特币脚本执行示例"><a href="#1-3-比特币脚本执行示例" class="headerlink" title="1.3. 比特币脚本执行示例"></a>1.3. 比特币脚本执行示例</h4><p>Bitcoin Script Explorer (<a href="https://paulkernfeld.com/bse/">https://paulkernfeld.com/bse/</a>) 给出了P2PKH的示例</p><h4 id="1-4-加解密及hash相关网站"><a href="#1-4-加解密及hash相关网站" class="headerlink" title="1.4. 加解密及hash相关网站"></a>1.4. 加解密及hash相关网站</h4><p>Base58编码 （<a href="https://www.lddgo.net/convert/base58%EF%BC%89">https://www.lddgo.net/convert/base58）</a></p><p>SHA256 （<a href="https://www.mklab.cn/utils/sha%EF%BC%89">https://www.mklab.cn/utils/sha）</a></p><h4 id="1-5-比特币客户端"><a href="#1-5-比特币客户端" class="headerlink" title="1.5. 比特币客户端"></a>1.5. 比特币客户端</h4><p>Bitcoin Core（<a href="https://github.com/bitcoin/bitcoin%EF%BC%89%E6%AF%94%E7%89%B9%E5%B8%81%E5%8F%82%E8%80%83%E5%AE%9E%E6%96%BD%EF%BC%8CC/C++">https://github.com/bitcoin/bitcoin）比特币参考实施，C/C++</a></p><p>bitcoinj（<a href="https://bitcoing.github.io)java全节点客户端库,java/">https://bitcoing.github.io）Java全节点客户端库，Java</a></p><p>Bits of Proof（BOP）（<a href="https://bitsofproof.com)比特币的java企业级实现,java/">https://bitsofproof.com）比特币的Java企业级实现，Java</a></p><p>python-bitcoinlib（<a href="https://github.com/petertodd/python-bitcoinlib%EF%BC%89Peter">https://github.com/petertodd/python-bitcoinlib）Peter</a> Todd提供的Python比特币库、共识库和节点，Python</p><p>pycoin（<a href="https://github.com/richardkiss/pycoin%EF%BC%89Richard">https://github.com/richardkiss/pycoin）Richard</a> Kiss提供的Python比特币库，Python</p><p>pybitcointools（<a href="https://github.com/vbuterin/pybitointools%EF%BC%89Vitalik">https://github.com/vbuterin/pybitointools）Vitalik</a> Buterin提供的Python比特币库，Python</p><p>btcd（<a href="https://github.com/btcsuite/btcd%EF%BC%89Go%E8%AF%AD%E8%A8%80%E5%85%A8%E8%8A%82%E7%82%B9%E6%AF%94%E7%89%B9%E5%B8%81%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8CGolang">https://github.com/btcsuite/btcd）Go语言全节点比特币客户端，Golang</a></p><h4 id="1-6-比特币规范"><a href="#1-6-比特币规范" class="headerlink" title="1.6. 比特币规范"></a>1.6. 比特币规范</h4><p>BIP协议 (<a href="https://github.com/bitcoin/bips">https://github.com/bitcoin/bips</a>)</p><h3 id="2-从比特币钱包说起来"><a href="#2-从比特币钱包说起来" class="headerlink" title="2. 从比特币钱包说起来"></a>2. 从比特币钱包说起来</h3><h4 id="2-1-Alice创建了一个钱包，并请朋友给了她0-1-Bitcoin"><a href="#2-1-Alice创建了一个钱包，并请朋友给了她0-1-Bitcoin" class="headerlink" title="2.1. Alice创建了一个钱包，并请朋友给了她0.1 Bitcoin"></a>2.1. Alice创建了一个钱包，并请朋友给了她0.1 Bitcoin</h4><p>比特币钱包是最活跃的比特币生态系统应用。每种比特币钱包客户端都为客户提供密钥管理、支付验证等功能，还有一些钱包可以通过API与比特币交互，如Bitcoin Core。接下来仅以Bitcoin Core客户端来举例。接下来从一个可以被查询的交易说起来。</p><p>以Alice为例，Alice如果通过某个客户端创建了一个比特币钱包，她会拥有一个公钥和一个私钥，同时还会获得一个被公钥加密的比特币地址，如1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK。通过Bitcoin Core客户端，可以查询到这个地址的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">getaddressinfo &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;<br><br>&#123;<br>  &quot;address&quot;: &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;,<br>  &quot;scriptPubKey&quot;: &quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;,<br>  &quot;ismine&quot;: false,<br>  &quot;solvable&quot;: false,<br>  &quot;iswatchonly&quot;: false,<br>  &quot;isscript&quot;: false,<br>  &quot;iswitness&quot;: false,<br>  &quot;ischange&quot;: false,<br>  &quot;labels&quot;: [<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>​Alice可以向她的朋友购买了0.1比特币。当她朋友在客户端上确认交易以后，这笔交易会被发往区块链网络。但这时候这笔交易还未被确认（即被打包进一个区块里）。只有等到交易被添加到区块链中，这笔交易才算是被确认了。</p><h4 id="2-2-Alice使用Bitcoin向Bob购买了一杯咖啡"><a href="#2-2-Alice使用Bitcoin向Bob购买了一杯咖啡" class="headerlink" title="2.2. Alice使用Bitcoin向Bob购买了一杯咖啡"></a>2.2. Alice使用Bitcoin向Bob购买了一杯咖啡</h4><p>Alice想要在Bob的咖啡店购买一杯价格为0.015 Bitcoin的咖啡，于是向Bob的地址转了比特币，交易ID是0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2。我们可以从上面的任意一个比特币浏览器里查到这笔交易：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;<br>  &quot;txid&quot;: &quot;0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2&quot;,<br>  &quot;size&quot;: 258,<br>  &quot;version&quot;: 1,<br>  &quot;locktime&quot;: 0,<br>  &quot;fee&quot;: 50000,<br>  &quot;inputs&quot;: [<br>    &#123;<br>      &quot;coinbase&quot;: false,<br>      &quot;txid&quot;: &quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;,<br>      &quot;output&quot;: 0,<br>      &quot;sigscript&quot;: &quot;483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&quot;,<br>      &quot;sequence&quot;: 4294967295,<br>      &quot;pkscript&quot;: &quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;,<br>      &quot;value&quot;: 10000000,<br>      &quot;address&quot;: &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;,<br>      &quot;witness&quot;: []<br>    &#125;<br>  ],<br>  &quot;outputs&quot;: [<br>    &#123;<br>      &quot;address&quot;: &quot;1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA&quot;,<br>      &quot;pkscript&quot;: &quot;76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac&quot;,<br>      &quot;value&quot;: 1500000,<br>      &quot;spent&quot;: false,<br>      &quot;spender&quot;: null<br>    &#125;,<br>    &#123;<br>      &quot;address&quot;: &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;,<br>      &quot;pkscript&quot;: &quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;,<br>      &quot;value&quot;: 8450000,<br>      &quot;spent&quot;: false,<br>      &quot;spender&quot;: null<br>    &#125;<br>  ],<br>  &quot;block&quot;: &#123;<br>    &quot;height&quot;: 277316,<br>    &quot;position&quot;: 64<br>  &#125;,<br>  &quot;deleted&quot;: false,<br>  &quot;time&quot;: 1388185914,<br>  &quot;rbf&quot;: false,<br>  &quot;weight&quot;: 1032<br>&#125;<br></code></pre></td></tr></table></figure><p>​【交易形式】这个JSON字符串中有两个大的关键字，inputs和outputs。inputs就是来源的钱包。如果Alice的一个钱包钱不够付的话，就可以在inputs里放多个钱包，使用多个钱包共同找零。而outputs有两个地址，其中一个地址跟inputs的地址一样。这是给Alice的找零。Alice拥有0.1 Bitcoin，但咖啡只需要0.015 Bitcoin，所以剩下的找零需要显式地转回Alice的钱包。</p><p>【交易费】在现实里，转账是需要支付交易费的，比特币依靠众多网络节点来记账，记账成功的人付出了劳动，所以需要得到奖励。大家一般会在转账中预留交易费。如，Alice原来钱包有0.1 Bitcoin，转给Bob 0.015 Bitcoin，但转回自己钱包 0.0845 Bitcoin。这样，这笔交易就留出了0.0005 Bitcoin的交易费给记账人。</p><p>【钱包余额】可以看到，在inputs里是没有显示钱包余额的。所以，每次发起交易时，Bitcoin钱包客户端都会向上查找区块链，找到上一笔交易和交易的额度，以统计出这个钱包的未花费输出（UTXO, unspent transaction outputs）。</p><p>【交易确认】只有当交易被打包进区块，串联到区块链上时，这笔交易才被正式确认了。但对于Bob来说，这笔交易只要输入输出正确，被确认只是迟早的事，他不需要等到十分钟后新区块诞生、这笔交易被包含到区块里再给Alice咖啡。这点小风险是可以冒的。</p><h3 id="3-挖矿是怎么回事"><a href="#3-挖矿是怎么回事" class="headerlink" title="3. 挖矿是怎么回事"></a>3. 挖矿是怎么回事</h3><h4 id="3-1-挖矿的Jing"><a href="#3-1-挖矿的Jing" class="headerlink" title="3.1. 挖矿的Jing"></a>3.1. 挖矿的Jing</h4><p>【什么是挖矿】在Alice和Bob交易的时候，有一个遥远城市的矿工Jing。他在不停地接收新的未确认交易放进他的内存池。同时，他还在不断打包内存池里的交易试图生成新的区块链，这通过计算一个结果来实现。当他算出了一个结果，就会向所有客户端（所有节点）发布这个区块，挖矿成功。此时，Alice和Bob也能接收到这个区块，这时候Alice的交易就被确认了。</p><p>【验证交易】在Jing接收交易的时候，他也会对每一笔交易进行一连串验证，剔除其中不正确的交易，仅在内存池保留正确交易。</p><p>【防篡改】随着新的区块不断诞生，Alice和Bob的交易被埋在更多区块里面，有人想要篡改这笔交易就需要计算出更多的区块，篡改也就越困难。</p><p>【挖矿竞争失败】假如Jing不幸没能生成新的区块，他在努力的过程中收到了别人发来的新区块，他就只能从内存池中删除新区块里包含的交易，然后开始下一轮努力。</p><h3 id="4-比特币中的密码学"><a href="#4-比特币中的密码学" class="headerlink" title="4. 比特币中的密码学"></a>4. 比特币中的密码学</h3><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/01.jpg" alt="img"></p><p>在刚才已经说到，Alice生成比特币钱包时生成了一对公钥和私钥，比特币地址是由公钥生成的。接下来就来介绍这个过程。</p><h4 id="4-1-生成私钥"><a href="#4-1-生成私钥" class="headerlink" title="4.1. 生成私钥"></a>4.1. 生成私钥</h4><p>私钥可以是1和n-1之间的任何数字，其中n是一个常数（n&#x3D;1.158×1077，略小于2256），并被定义为在比特币里所使用的椭圆曲线的阶（见椭圆曲线密码学解释）。要生成这样的私钥，我们随机选择一个256位的数字，并检查它是否小于n-1。从编程的角度来看，一般是通过在一个密码学安全的随机源中取出一长串随机字节，对其使用SHA256散列算法进行运算，这样就可以方便地产生一个256位的数字。如果运算结果小于n-1，我们就有了一个合适的私钥。否则，我们就用另一个随机数再重复一次这个过程。</p><h4 id="4-2-由私钥生成公钥"><a href="#4-2-由私钥生成公钥" class="headerlink" title="4.2. 由私钥生成公钥"></a>4.2. 由私钥生成公钥</h4><p>通过椭圆曲线乘法可以从私钥计算得到公钥，这是不可逆转的过程：K&#x3D;k*G。其中k是私钥，G是被称为生成点的常数点，而K是所得公钥。</p><p>（椭圆曲线详细说明见本书4.1.5节，比特币使用的椭圆曲线标准见secp256k1，）</p><h4 id="4-3-由公钥生成比特币地址"><a href="#4-3-由公钥生成比特币地址" class="headerlink" title="4.3. 由公钥生成比特币地址"></a>4.3. 由公钥生成比特币地址</h4><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/02.jpg" alt="img"></p><p>上图显示了一个公钥生成比特币地址的过程。</p><h4 id="4-4-附加知识：Base58Check编码"><a href="#4-4-附加知识：Base58Check编码" class="headerlink" title="4.4. 附加知识：Base58Check编码"></a>4.4. 附加知识：Base58Check编码</h4><p>在Base58编码的基础上增加了版本号前缀及校验和</p><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/03.jpg" alt="img"></p><p>由于不同的编码数据带有不同前缀，编码后结果会有固定的首位，如下所示。</p><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/04.jpg" alt="img"></p><h3 id="5-比特币中的钱包"><a href="#5-比特币中的钱包" class="headerlink" title="5. 比特币中的钱包"></a>5. 比特币中的钱包</h3><p>比特币钱包只包含私钥，不包含比特币。每个私钥对应一个比特币地址，钱包就是存放全部私钥的地方。当有人需要使用比特币交易时，他会查找自己的钱包，找到足够支付这笔款项的比特币地址，再通过这个地址转账。</p><p>钱包其实分为两种，一种是非确定性钱包，私钥与私钥之间并无关联，另一种是确定性钱包，私钥之间存在关联，大家可以通过种子恢复所有派生私钥，防止丢失。以下以BIP-32标准定义的HD钱包为例讲解。</p><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/05.jpg" alt="img"></p><h4 id="5-1-助记词"><a href="#5-1-助记词" class="headerlink" title="5.1. 助记词"></a>5.1. 助记词</h4><p>助记词编码是表示（可编码成）确定性钱包的随机数种子的英语单词序列。</p><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/06.jpg" alt="img"></p><h4 id="5-2-助记词加盐"><a href="#5-2-助记词加盐" class="headerlink" title="5.2. 助记词加盐"></a>5.2. 助记词加盐</h4><p>在HMAC-SHA512散列算法中，只要给出固定的输入一定能给出固定的输出，所以助记词一旦泄露，那种子也会泄露。给助记词加盐，引入随机数，这样即使助记词泄露种子也不会泄露。</p><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/07.jpg" alt="img"></p><h4 id="5-3-由种子派生出主私钥私钥"><a href="#5-3-由种子派生出主私钥私钥" class="headerlink" title="5.3. 由种子派生出主私钥私钥"></a>5.3. 由种子派生出主私钥私钥</h4><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/08.jpg" alt="img"></p><p>  （注：该图中的 主私钥“M” 应更正为 主公钥“M” ）</p><p>根种子（还有可选密码）输入到HMAC-SHA512算法中就可以得到一个可用来创造主私钥（m）和主链码（c）的散列值。</p><p>主私钥（m）可以通过4.1.4节中介绍的标准椭圆曲线m*G乘法流程来生成相对应的主公钥（M）。</p><p>主链码（c）用于从父私钥创造子私钥的那个函数中引入随机数（熵），如下一节所示。</p><h4 id="5-4-从主私钥派生出子私钥"><a href="#5-4-从主私钥派生出子私钥" class="headerlink" title="5.4. 从主私钥派生出子私钥"></a>5.4. 从主私钥派生出子私钥</h4><p>分层确定性钱包使用CKD（child key derivation，子私钥派生）函数从父私钥派生出子私钥。子密钥派生函数是基于单向散列函数的，这个函数结合了：</p><p>·一个父私钥或者公钥（ECDSA未压缩密钥）</p><p>·一个256位的链码，用于验证地址是否来自唯一的HD根，且在下一步拓展中充当随机数</p><p>·一个32位的索引码，用于充当随机数</p><p>将父公钥、链码以及索引号结合在一起并且用HMAC-SHA512函数散列之后可以产生512位的散列值。所得的512位散列值可被拆分为两部分。右半部分的256位可以给子链当链码，左半部分256位以及索引码被加载在父私钥上来派生子私钥。举个例子，索引码被设为0以产生父私钥的第0个子私钥。</p><h4 id="5-5-拓展密钥"><a href="#5-5-拓展密钥" class="headerlink" title="5.5. 拓展密钥"></a>5.5. 拓展密钥</h4><p>将256位私钥与256位链码串联成的512位序列并储存，这被称为拓展密钥。拓展密钥实际上分拓展公钥和拓展私钥。</p><p>由于我们只需要密钥、链码和索引码就可以派生出所有子密钥，而索引号是固定范围的值。因此，直到拓展密码即可派生出所有子密钥。</p><p>需要注意的是，拓展私钥可以派生出完整的子密钥，包含子公钥和子私钥，但拓展公钥只能派生出子公钥。</p><h4 id="5-6-由父公钥派生子公钥"><a href="#5-6-由父公钥派生子公钥" class="headerlink" title="5.6. 由父公钥派生子公钥"></a>5.6. 由父公钥派生子公钥</h4><p>如图所示。子公钥可以有两种派生方式，一种由私钥派生，一种由父公钥派生。</p><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/09.jpg" alt="img"></p><h4 id="5-7-HD钱包的使用场景"><a href="#5-7-HD钱包的使用场景" class="headerlink" title="5.7. HD钱包的使用场景"></a>5.7. HD钱包的使用场景</h4><p>有商家发布了一个比特币地址用于收款，当订单变多时，商家可能会有多笔相似的交易，它们都不一定写了备注，这样商家很难区分谁付了款谁没有。商家可以加载一个拓展公钥，使用这个拓展公钥为每个买家生成一个比特币地址。</p><h3 id="6-交易"><a href="#6-交易" class="headerlink" title="6. 交易"></a>6. 交易</h3><p>我们回看Alice付款的这笔交易。前面已经讲解过交易的几个构成，这里不再重复赘述，我们来关注一下输入和输出各自的锁定脚本（outputs)和解锁脚本(inputs)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;<br>  &quot;txid&quot;: &quot;0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2&quot;,<br>  &quot;size&quot;: 258,<br>  &quot;version&quot;: 1,<br>  &quot;locktime&quot;: 0,<br>  &quot;fee&quot;: 50000,<br>  &quot;inputs&quot;: [<br>    &#123;<br>      &quot;coinbase&quot;: false,<br>      &quot;txid&quot;: &quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;,<br>      &quot;output&quot;: 0,<br>      &quot;sigscript&quot;: &quot;483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&quot;,<br>      &quot;sequence&quot;: 4294967295,<br>      &quot;pkscript&quot;: &quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;,<br>      &quot;value&quot;: 10000000,<br>      &quot;address&quot;: &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;,<br>      &quot;witness&quot;: []<br>    &#125;<br>  ],<br>  &quot;outputs&quot;: [<br>    &#123;<br>      &quot;address&quot;: &quot;1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA&quot;,<br>      &quot;pkscript&quot;: &quot;76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac&quot;,<br>      &quot;value&quot;: 1500000,<br>      &quot;spent&quot;: false,<br>      &quot;spender&quot;: null<br>    &#125;,<br>    &#123;<br>      &quot;address&quot;: &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;,<br>      &quot;pkscript&quot;: &quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;,<br>      &quot;value&quot;: 8450000,<br>      &quot;spent&quot;: false,<br>      &quot;spender&quot;: null<br>    &#125;<br>  ],<br>  &quot;block&quot;: &#123;<br>    &quot;height&quot;: 277316,<br>    &quot;position&quot;: 64<br>  &#125;,<br>  &quot;deleted&quot;: false,<br>  &quot;time&quot;: 1388185914,<br>  &quot;rbf&quot;: false,<br>  &quot;weight&quot;: 1032<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-交易输入"><a href="#6-1-交易输入" class="headerlink" title="6.1. 交易输入"></a>6.1. 交易输入</h4><p>锁定脚本被称为scriptPubKey，因为锁定脚本往往含有一个公钥或比特币地址（公钥散列值）。解锁脚本是每个交易输入的一部分，而且往往含有一个由用户的比特币钱包（通过用户的私钥）生成的数字签名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;Cafe Signature&gt; &lt;Cafe Public Key&gt; OP_DUP OP_HASH160  // 锁定脚本<br>&lt;Cafe Public Key Hash&gt; OP_EQUALVERIFY OP_CHECKSIG     // 解锁脚本<br></code></pre></td></tr></table></figure><p>​在执行交易前，客户端会将锁定脚本与解锁脚本拼接起来，然后顺序执行。脚本执行方式见本书6.4.3、6.4.4两节。脚本最后会验证数字签名是否与公钥Hash相匹配，若匹配成功，则该交易可以执行。</p><p>这个示例也可见网站<a href="https://paulkernfeld.com/bse/%E3%80%82">https://paulkernfeld.com/bse/。</a></p><h4 id="6-2-关于数字签名"><a href="#6-2-关于数字签名" class="headerlink" title="6.2. 关于数字签名"></a>6.2. 关于数字签名</h4><p>这其实是密码学的一部分，涉及的数学原理十分复杂，有兴趣有时间再去深入了解。</p><p>这里列出可以查阅的资料：</p><ol><li>《数字签名与密码学原理》这本书系统详细地解释了数字签名的原理、算法和应用。是学习数字签名的好入门书。</li><li>MIT开放课程《密码学入门》中的数字签名课程视频,操作清晰系统讲解了RSA和ECDSA算法。</li><li>《深入理解密码学》第9章专门讲解了数字签名的数学基础知识。对于对密码学感兴趣的读者很有参考价值。</li><li>Github上的libsecp256k1和BouncyCastle项目,包含RSA和ECDSA的完整示例代码,学习代码实现很有帮助。</li><li>StackOverflow上关于数字签名的问题答疑,侧重解答具体实现问题的难点。</li><li>《区块链技术原理与实践》一书中对比特币的ECDSA签名做了详细介绍,对区块链用户很友好。</li></ol><h3 id="7-高级交易脚本"><a href="#7-高级交易脚本" class="headerlink" title="7. 高级交易脚本"></a>7. 高级交易脚本</h3><p>在之前的所有介绍中，我们的讲述围绕P2PKH（Pay-to-PublicKey-Hash）脚本来讲述。现在我们介绍一些别的脚本。</p><h4 id="7-1-多重签名"><a href="#7-1-多重签名" class="headerlink" title="7.1. 多重签名"></a>7.1. 多重签名</h4><p>多重签名脚本设置了一个条件，其中N个公钥被记录在脚本中，并且必须提供至少M个签名才能解锁资金。这也称为M-N方案，其中N是密钥的总数，M是验证所需的签名的数量。</p><h4 id="7-2-P2SH-Pay-to-Script-Hash"><a href="#7-2-P2SH-Pay-to-Script-Hash" class="headerlink" title="7.2. P2SH Pay-to-Script-Hash"></a>7.2. P2SH Pay-to-Script-Hash</h4><p>在P2SH交易中，由散列值代替的锁定脚本被称为兑换脚本，因为它在兑换时显示给系统，而不是以锁定脚本形式呈现。</p><p><img src="/img/20231225-Bitcoin%E2%80%94%E2%80%94%E3%80%8A%E7%B2%BE%E9%80%9A%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E7%A8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/10.jpg" alt="img"></p><p>一笔P2SH交易锁定脚本将输出与脚本散列值关联，而不是与前面特别长的脚本相关联。</p><p>举个例子，在不含P2SH的脚本中，加锁脚本是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">2<br>04C16B8698A9ABF84250A7C3EA7EEDEF9897D1C8C6ADF47F06CF73370D74DCCA01CDCA79DCC5C395<br>D7EEC6984D83F1F50C900A24DD47F569FD4193AF5DE762C58704A2192968D8655D6A935BEAF2CA23<br>E3FB87A3495E7AF308EDF08DAC3C1FCBFC2C75B4B0F4D0B1B70CD2423657738C0C2B1D5CE65C97D7<br>8D0E34224858008E8B49047E63248B75DB7379BE9CDA8CE5751D16485F431E46117B9D0C1837C9D5<br>737812F393DA7D4420D7E1A9162F0279CFC10F1E8E8F3020DECDBC3C0DD389D99779650421D65CBD<br>7149B255382ED7F78E946580657EE6FDA162A187543A9D85BAAA93A4AB3A8F044DADA618D0872274<br>40645ABE8A35DA8C5B73997AD343BE5C2AFD94A5043752580AFA1ECED3C68D446BCAB69AC0BA7DF5<br>0D56231BE0AABF1FDEEC78A6A45E394BA29A1EDF518C022DD618DA774D207D137AAB59E0B000EB7E<br>D238F4D800 5 CHECKMULTISIG<br></code></pre></td></tr></table></figure><p>而在P2SH的脚本中，加锁脚本是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">HASH160 54c557e07dde5bb6cb791c7a540e0a4796f5e97e EQUAL<br></code></pre></td></tr></table></figure><p>​当收款人想要再消费这笔比特币时，他必须出示附上原始兑换脚本（可计算出锁定UTXO散列值）和必要的解锁签名。这样，就将复杂的脚本构建过程从支付方转移到了收款方。而这笔交易的真实脚本代码是保存在区块链网络中的一个脚本数据库里，通过脚本哈希唯一标识。</p><h4 id="7-3-数据记录输出（RETURN操作符）"><a href="#7-3-数据记录输出（RETURN操作符）" class="headerlink" title="7.3. 数据记录输出（RETURN操作符）"></a>7.3. 数据记录输出（RETURN操作符）</h4><p>有人利用区块链的不可篡改性，开始使用区块链记录一些数据。此类交易仅将比特币地址当作自由组合的20个字节而使用，进而会产生不能用于交易的UTXO。因为比特币地址只是被当作数据使用，并不与私钥相匹配，所以会导致UTXO不能被用于交易，因而是一种伪支付行为。因此，这些交易永远不会被花费，所以永远不会从UTXO集中删除，并导致UTXO数据库的大小永远增加或“膨胀”。</p><p>比特币后来的客户端携带了Return字段，允许开发者在交易输出上增加80个字节的非交易数据。此类数据无须存储于UTXO集。Return输出被记录在区块链上，它们会消耗磁盘空间，也会导致区块链规模的增加，但它们不存储在UTXO集中，因此也不会导致UTXO膨胀从而占用昂贵的内存让全节点都不堪重负。</p><h4 id="7-4-脚本的特殊方法"><a href="#7-4-脚本的特殊方法" class="headerlink" title="7.4. 脚本的特殊方法"></a>7.4. 脚本的特殊方法</h4><h5 id="7-4-1-时间锁"><a href="#7-4-1-时间锁" class="headerlink" title="7.4.1. 时间锁"></a>7.4.1. 时间锁</h5><p>在解锁脚本中，人们可以在脚本中包含CHECKLOCKTIMEVERIFY，用来检验该笔交易是否达到了可花费时间。</p><h5 id="7-4-2-具有条件控制的脚本"><a href="#7-4-2-具有条件控制的脚本" class="headerlink" title="7.4.2. 具有条件控制的脚本"></a>7.4.2. 具有条件控制的脚本</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">condition<br>IF<br>  code to run when condition is true<br>ELSE<br>  code to run when condition is false<br>ENDIF<br>code to run in either case<br></code></pre></td></tr></table></figure><h5 id="7-4-3-Verify"><a href="#7-4-3-Verify" class="headerlink" title="7.4.3. Verify"></a>7.4.3. Verify</h5><p>VERIFY后缀表示如果评估的条件不为TRUE，脚本的执行将立即终止，并且该交易被视为无效。</p><h5 id="7-4-4-复杂脚本示例"><a href="#7-4-4-复杂脚本示例" class="headerlink" title="7.4.4. 复杂脚本示例"></a>7.4.4. 复杂脚本示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">IF<br>  IF<br>    2<br>  ELSE<br>    &lt;30 days&gt; CHECKSEQUENCEVERIFY DROP<br>    &lt;Abdul the Lawyer&#x27;s Pubkey&gt; CHECKSIGVERIFY<br>    1<br>  ENDIF<br>  &lt;Mohammed&#x27;s Pubkey&gt; &lt;Saeed&#x27;s Pubkey&gt; &lt;Zaira&#x27;s Pubkey&gt; 3 CHECKMULTISIG<br>ELSE<br>  &lt;90 days&gt; CHECKSEQUENCEVERIFY DROP<br>  &lt;Abdul the Lawyer&#x27;s Pubkey&gt; CHECKSIG<br>ENDIF<br></code></pre></td></tr></table></figure><p>该路径可以通过这样的解锁脚本指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">0 &lt;Mohammed&#x27;s Sig&gt; &lt;Zaira&#x27;s Sig&gt; TRUE TRUE<br></code></pre></td></tr></table></figure><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h3><p>这本书提供了一个系统而全面的比特币实操指南，对于每个部分都会提供一定的代码示例（非源码，而是如何调用相关方法），阅读完后基本能解答普通人对比特币的疑问。其中关于密码学的部分尤其精彩，深入浅出讲解了比特币的加密过程和应用，不拘泥于细节，能给读者建立基本概念，也看得出作者功力深厚。我这里只写了我看过的一部分，书中最后几章讲了比特币及周边衍生物，全面而又详尽，大家有兴趣可以自己去看看，是一本非常好的书。</p>]]></content>
    
    
    
    <tags>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go的net包中的套接字编程</title>
    <link href="/2023/12/19/20231219-go%E7%9A%84net%E5%8C%85%E4%B8%AD%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/12/19/20231219-go%E7%9A%84net%E5%8C%85%E4%B8%AD%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Golang的net包中的套接字编程"><a href="#Golang的net包中的套接字编程" class="headerlink" title="Golang的net包中的套接字编程"></a>Golang的net包中的套接字编程</h3><p>套接字的意思是：</p><ul><li>在操作系统网络堆栈中,用于标识一个“端点”的抽象资源。一个端点包括IP地址和端口号。</li><li>套接字通过端点来标识正在网络上进行通信的两个应用进程。</li></ul><p>在这里，我们需要查看套接字是如何被创建和使用的。使用套接字编程，需要用户自己处理以下几个点：</p><ul><li>连接管理（如 连接数过多）</li><li>数据封包和拆包（序列化和反序列化）</li><li>错误处理 （返回error或返回错误码)</li></ul><h4 id="TCP套接字编程"><a href="#TCP套接字编程" class="headerlink" title="TCP套接字编程"></a>TCP套接字编程</h4><h5 id="服务端程序："><a href="#服务端程序：" class="headerlink" title="服务端程序："></a>服务端程序：</h5><p>​以下是一个简化的服务端程序示例，有以下几个问题，但还是可以姑且一试：</p><ol><li>当接收到相应请求后，服务端调用goroutine来处理，实现了异步处理，但程序未对使用的goroutine数量进行限制。</li><li>未进行数据装包拆包，直接发送字符串、打印字符串。</li><li>错误处理仅做了打印日志，未进行重试。</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello new&quot;</span>)<br>addr, err := net.ResolveTCPAddr(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panic(err)<br>&#125;<br><br>listen, err := net.ListenTCP(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panic(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listen.AcceptTCP()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-keyword">go</span> handleConnectionForServer(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConnectionForServer</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">for</span> flag := <span class="hljs-literal">false</span>; ; &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br><span class="hljs-keyword">if</span> !flag &#123;<br><span class="hljs-keyword">if</span> _, err := conn.Write([]<span class="hljs-type">byte</span>(Usage())); err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>&#125;<br>flag = <span class="hljs-literal">true</span><br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> length, err := conn.Read(buf); err != <span class="hljs-literal">nil</span> &#123;<br>writeResponse(parseRequest(<span class="hljs-string">&quot;&quot;</span>), conn)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>req := <span class="hljs-type">string</span>(buf[:length])<br><span class="hljs-keyword">if</span> req == <span class="hljs-string">&quot;exit&quot;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>writeResponse(parseRequest(req), conn)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Usage</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;return usage.&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeResponse</span><span class="hljs-params">(resp <span class="hljs-type">string</span>, conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">if</span> _, err := conn.Write([]<span class="hljs-type">byte</span>(resp)); err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseRequest</span><span class="hljs-params">(req <span class="hljs-type">string</span>)</span></span> (resp <span class="hljs-type">string</span>) &#123;<br>fmt.Println(req)<br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="客户端程序："><a href="#客户端程序：" class="headerlink" title="客户端程序："></a>客户端程序：</h5><p>​以下是一个简化的客户端程序，从命令行界面读入数据，然后向服务端发送请求。若服务端未启动，tcp双向连接无法建立， 客户端会报错并停止运行。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> sig = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello client&quot;</span>)<br>RemoteAddr, err := net.ResolveTCPAddr(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>LocalAddr, err := net.ResolveTCPAddr(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8001&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>conn, err := net.DialTCP(<span class="hljs-string">&quot;tcp&quot;</span>, LocalAddr, RemoteAddr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>handleConnectionForClient(conn)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConnectionForClient</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">go</span> signalMonitor(conn)<br>Stdin := bufio.NewReader(os.Stdin)<br><span class="hljs-keyword">for</span> &#123;<br>getResponse(conn)<br>fmt.Print(<span class="hljs-string">&quot;[ random_w ]#&quot;</span>)<br>input, err := Stdin.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>input = strings.TrimSpace(input)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">switch</span> input &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;quit&quot;</span>, <span class="hljs-string">&quot;exit&quot;</span>:<br>sig &lt;- syscall.SIGQUIT<br><span class="hljs-keyword">default</span>:<br>sendMsgToServer(conn, input)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sendMsgToServer</span><span class="hljs-params">(conn net.Conn, msg <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>_, err := conn.Write([]<span class="hljs-type">byte</span>(msg))<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getResponse</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>respByte := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>length, err := conn.Read(respByte)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;[ server ]# 接收消息失败&quot;</span>)<br>&#125;<br><span class="hljs-keyword">for</span> line, str := <span class="hljs-keyword">range</span> strings.Split(<span class="hljs-type">string</span>(respByte[:length]), <span class="hljs-string">&quot;\n&quot;</span>) &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(str) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> line == <span class="hljs-number">1</span> &#123;<br>fmt.Print(fmt.Sprintf(<span class="hljs-string">&quot;[ server ]# \n%s\n&quot;</span>, str))<br><span class="hljs-keyword">continue</span><br>&#125;<br>fmt.Println(str)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">signalMonitor</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>signal.Notify(sig, syscall.SIGQUIT, syscall.SIGKILL, syscall.SIGINT)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-sig:<br>_, _ = conn.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;exit&quot;</span>))<br>fmt.Println(<span class="hljs-string">&quot;\nGood Bye !!!!!&quot;</span>)<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="UDP套接字编程"><a href="#UDP套接字编程" class="headerlink" title="UDP套接字编程"></a>UDP套接字编程</h4><h5 id="服务端程序"><a href="#服务端程序" class="headerlink" title="服务端程序"></a>服务端程序</h5><p>​udp除了协议需要使用udp协议外，其余与tcp服务端没有区别，此处略过。</p><h5 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h5><p>​除了协议，其余与tcp客户端没有区别。若服务端未启动，客户端不会报错，因为udp不是面向连接的协议。</p><h4 id="Unix套接字编程"><a href="#Unix套接字编程" class="headerlink" title="Unix套接字编程"></a>Unix套接字编程</h4><p>UNIX域套接字的特点:</p><ul><li>使用文件系统路径作为地址,适用于同一主机内的IPC</li><li>与TCP socket等网络通信不同,不依赖IP地址和端口</li><li>进程间能通过类似管道的方式直接通信,性能好于网络通信</li></ul><h5 id="服务端程序-1"><a href="#服务端程序-1" class="headerlink" title="服务端程序"></a>服务端程序</h5><p>​仅地址解析与之前不同。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs golang">addr := &amp;net.UnixAddr&#123;Name: <span class="hljs-string">&quot;mysocket&quot;</span>, Net: <span class="hljs-string">&quot;unix&quot;</span>&#125;<br>listen, err := net.ListenUnix(<span class="hljs-string">&quot;unix&quot;</span>, addr)<br><br></code></pre></td></tr></table></figure><h4 id="多播通信"><a href="#多播通信" class="headerlink" title="多播通信"></a>多播通信</h4><p>注意，多播地址应在224.0.0.0 - 239.255.255.255中。其中:</p><ul><li>224.0.0.0 - 224.0.0.255: 本地网络多播</li><li>224.0.1.0 - 238.255.255.255: 公众组多播</li><li>239.0.0.0 - 239.255.255.255: 站点本地多播</li></ul><p>设置多播地址时应遵循地址使用规则。</p><h5 id="服务端程序：-1"><a href="#服务端程序：-1" class="headerlink" title="服务端程序："></a>服务端程序：</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang">addr, err := net.ResolveUDPAddr(<span class="hljs-string">&quot;udp4&quot;</span>, <span class="hljs-string">&quot;224.0.0.251:1234&quot;</span>) <br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>conn, err := net.ListenMulticastUDP(<span class="hljs-string">&quot;udp4&quot;</span>, <span class="hljs-literal">nil</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="附：地址解析"><a href="#附：地址解析" class="headerlink" title="附：地址解析"></a>附：地址解析</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golang">addrs, err := net.LookupHost(<span class="hljs-string">&quot;google.com&quot;</span>)<br></code></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://chai2010.cn/advanced-go-programming-book/ch5-web/ch5-01-introduction.html">Web开发简介 - Go语言高级编程 (chai2010.cn)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几个多线程类对AQS的state的变更</title>
    <link href="/2023/11/28/20231128-%E5%87%A0%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%AF%B9AQS%E7%9A%84state%E7%9A%84%E5%8F%98%E6%9B%B4/"/>
    <url>/2023/11/28/20231128-%E5%87%A0%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%AF%B9AQS%E7%9A%84state%E7%9A%84%E5%8F%98%E6%9B%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="几个多线程类对AQS的state的变更"><a href="#几个多线程类对AQS的state的变更" class="headerlink" title="几个多线程类对AQS的state的变更"></a>几个多线程类对AQS的state的变更</h3><h3 id="1-序章"><a href="#1-序章" class="headerlink" title="1. 序章"></a>1. 序章</h3><h4 id="1-1-AQS的几个重要接口介绍"><a href="#1-1-AQS的几个重要接口介绍" class="headerlink" title="1.1. AQS的几个重要接口介绍"></a>1.1. AQS的几个重要接口介绍</h4><p>重要属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>int state</td><td>同步状态，用它来标记是否加解锁了</td></tr></tbody></table><p>对外加解锁的重要接口：</p><table><thead><tr><th>tryAcquire</th><th>排他锁加锁</th></tr></thead><tbody><tr><td>tryRelease</td><td>排他锁解锁</td></tr><tr><td>tryAcquireShared</td><td>共享锁加锁</td></tr><tr><td>tryReleaseShared</td><td>共享锁解锁</td></tr></tbody></table><p>对AQS的使用基本上就是用不同方法控制它加锁解锁，接下来看这是如何实现的。另外，AQS除了加解锁以外，还需要维护双向链表，本节只关注加解锁，即state的状态变更。</p><h4 id="1-2-使用总结"><a href="#1-2-使用总结" class="headerlink" title="1.2. 使用总结"></a>1.2. 使用总结</h4><table><thead><tr><th><strong>使用类</strong></th><th><strong>初始化</strong></th><th><strong>加锁</strong></th><th><strong>解锁</strong></th></tr></thead><tbody><tr><td>ReentrantLock | FairSync</td><td>state设为1</td><td>若state为0， 当前值为队列首部时才可加锁。若state不为0，当前线程为获得锁的线程，则将state值继续上加。</td><td>state的值减少</td></tr><tr><td>CountDownLatch</td><td>state设为需要countDown的值</td><td>await()，尝试获取共享锁，并定期询问</td><td>countDown()，state的值减少</td></tr><tr><td>CyclicBarrier</td><td>未直接使用AQS，见下文</td><td>未直接使用AQS，见下文</td><td>未直接使用AQS，见下文</td></tr><tr><td>Semaphore | NonfairSync</td><td>state设为允许的并发值</td><td>acquire()，state减去抢占的值</td><td>release(), 将释放值加回去</td></tr><tr><td>Exchanger</td><td>暂略</td><td>暂略</td><td>暂略</td></tr></tbody></table><h3 id="2-ReentrantLock-FairSync"><a href="#2-ReentrantLock-FairSync" class="headerlink" title="2. ReentrantLock | FairSync"></a>2. ReentrantLock | FairSync</h3><p><img src="/img/20231128-%E5%87%A0%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%AF%B9AQS%E7%9A%84state%E7%9A%84%E5%8F%98%E6%9B%B4-01.jpg" alt="img"></p><p>AQS在ReentrantLock里有三个实现类，最底层是两个子类，这里仅以FairSync来说明。</p><h4 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1. 使用"></a>2.1. 使用</h4><p>略</p><h4 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2. 实现"></a>2.2. 实现</h4><h5 id="2-2-1-lock"><a href="#2-2-1-lock" class="headerlink" title="2.2.1. lock"></a>2.2.1. lock</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        sync.lock();<br>    &#125;<br><br><span class="hljs-comment">// 其他部分省略</span><br><br>&#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            acquire(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 其他部分省略</span><br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p>这里的lock调用了AQS里的acquire，而AQS里的acquire又调用了tryAcquire排他锁加锁，从而达成加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOwnableSynchronizer</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;<br>            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>            selfInterrupt();<br>    &#125;<br><br><span class="hljs-comment">// 其他部分省略</span><br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>FairSync重写了AQS的tryAcquire方法。若state为0， 当前值为队列首部时才可加锁。若state不为0，当前线程为获得锁的线程，则将state值继续上加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <br>    <span class="hljs-comment">// 其他部分省略</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Fair version of tryAcquire.  Don&#x27;t grant access unless</span><br><span class="hljs-comment">     * recursive call or no waiters or is first.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-2-unlock"><a href="#2-2-2-unlock" class="headerlink" title="2.2.2. unlock"></a>2.2.2. unlock</h5><p>调用AQS子类的release。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125;<br><br><span class="hljs-comment">// 其他部分省略</span><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOwnableSynchronizer</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br>        <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>                unparkSuccessor(h);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><span class="hljs-comment">// 其他部分省略</span><br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>调用回到子类里的tryRelease</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>        <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            free = <span class="hljs-literal">true</span>;<br>            setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>        &#125;<br>        setState(c);<br>        <span class="hljs-keyword">return</span> free;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-CountDownLatch"><a href="#3-CountDownLatch" class="headerlink" title="3. CountDownLatch"></a>3. CountDownLatch</h3><h4 id="3-1-用法"><a href="#3-1-用法" class="headerlink" title="3.1. 用法"></a>3.1. 用法</h4><p>使用方法：创建变量时赋值n，并在另一处线程调用await休眠当前线程。当程序执行了n个countDown时，休眠的线程被唤醒，继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">4</span>);<br><span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countDownLatchTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-number">1</span>);<br>            c.countDown();<br>            System.out.println(<span class="hljs-number">2</span>);<br>            c.countDown();<br>        &#125;<br>    &#125;).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-number">11</span>);<br>            c.countDown();<br>            System.out.println(<span class="hljs-number">22</span>);<br>            c.countDown();<br>        &#125;<br>    &#125;).start();<br>    c.await();<br>    System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-关于CountDownLatch的实现"><a href="#3-2-关于CountDownLatch的实现" class="headerlink" title="3.2. 关于CountDownLatch的实现"></a>3.2. 关于CountDownLatch的实现</h4><p>实际上也是通过AQS来计数的。在初始化时先给AQS的同步状态state赋值n，每次调用countDown时释放一次锁，即让state值-1。await的线程定期唤醒，尝试抢锁，如果没有别的冲突时就可抢锁成功，继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4982264981922014374L</span>;<br><br>    Sync(<span class="hljs-type">int</span> count) &#123;<br>        setState(count);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getState();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>        <span class="hljs-comment">// Decrement count; signal when transition to zero</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>                <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-CyclicBarrier"><a href="#4-CyclicBarrier" class="headerlink" title="4. CyclicBarrier"></a>4. CyclicBarrier</h3><h4 id="4-1-用法"><a href="#4-1-用法" class="headerlink" title="4.1. 用法"></a>4.1. 用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">2</span>);<br><span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cyclicBarrierTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                cb.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;).start();<br>    System.out.println(<span class="hljs-number">2</span>);<br>    cb.await();<br>    System.out.println(<span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-实现"><a href="#4-2-实现" class="headerlink" title="4.2. 实现"></a>4.2. 实现</h4><p>CyclicBarrier没有直接实现AQS，而是通过各种工具的组合实现控制的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generation</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">broken</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/** The lock for guarding barrier entry */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-comment">/** Condition to wait on until tripped */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">trip</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-comment">/** The number of parties */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> parties;<br><span class="hljs-comment">/* The command to run when tripped */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable barrierCommand;<br><span class="hljs-comment">/** The current generation */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Generation</span> <span class="hljs-variable">generation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generation</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Number of parties still waiting. Counts down from parties to 0</span><br><span class="hljs-comment"> * on each generation.  It is reset to parties on each new</span><br><span class="hljs-comment"> * generation or when broken.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br></code></pre></td></tr></table></figure><h5 id="4-2-1-初始化"><a href="#4-2-1-初始化" class="headerlink" title="4.2.1. 初始化"></a>4.2.1. 初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">CyclicBarrier</span><span class="hljs-params">(<span class="hljs-type">int</span> parties, Runnable barrierAction)</span> &#123;<br>    <span class="hljs-keyword">if</span> (parties &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-built_in">this</span>.parties = parties;<br>    <span class="hljs-built_in">this</span>.count = parties;<br>    <span class="hljs-built_in">this</span>.barrierCommand = barrierAction;<br>&#125;<br></code></pre></td></tr></table></figure><p>parties：参与的总线程数。</p><p>count： 正在等待进入屏障的线程数。因为初始化没有任何线程进入，所以设为parties的值。</p><p>barrierCommand：需要做的操作。</p><h5 id="4-2-2-触发"><a href="#4-2-2-触发" class="headerlink" title="4.2.2. 触发"></a>4.2.2. 触发</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dowait</span><span class="hljs-params">(<span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> nanos)</span><br>    <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException,<br>           TimeoutException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Generation</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> generation;<br><br>        <span class="hljs-keyword">if</span> (g.broken)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();<br><br>        <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>            breakBarrier();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> --count;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// tripped</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">ranAction</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> barrierCommand;<br>                <span class="hljs-keyword">if</span> (command != <span class="hljs-literal">null</span>)<br>                    command.run();<br>                ranAction = <span class="hljs-literal">true</span>;<br>                nextGeneration();<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (!ranAction)<br>                    breakBarrier();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// loop until tripped, broken, interrupted, or timed out</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (!timed)<br>                    trip.await();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0L</span>)<br>                    nanos = trip.awaitNanos(nanos);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                <span class="hljs-keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;<br>                    breakBarrier();<br>                    <span class="hljs-keyword">throw</span> ie;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// We&#x27;re about to finish waiting even if we had not</span><br>                    <span class="hljs-comment">// been interrupted, so this interrupt is deemed to</span><br>                    <span class="hljs-comment">// &quot;belong&quot; to subsequent execution.</span><br>                    Thread.currentThread().interrupt();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (g.broken)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();<br><br>            <span class="hljs-keyword">if</span> (g != generation)<br>                <span class="hljs-keyword">return</span> index;<br><br>            <span class="hljs-keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="hljs-number">0L</span>) &#123;<br>                breakBarrier();<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeoutException</span>();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>index &#x3D; count - 1。如果index为0，那触发代码段，并开启下一周期。如果index不为0，那进入循环，condition trip上的线程进入等待。直到有一段线程走到index &#x3D; count - 1的这里，执行breakBarrier</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">breakBarrier</span><span class="hljs-params">()</span> &#123;<br>    generation.broken = <span class="hljs-literal">true</span>;<br>    count = parties;<br>    trip.signalAll();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中，由于调用了trip.signalAll()，进入休眠的线程会被唤醒，并重新执行。</p><h3 id="5-Semaphore-NonfairSync"><a href="#5-Semaphore-NonfairSync" class="headerlink" title="5. Semaphore | NonfairSync"></a>5. Semaphore | NonfairSync</h3><h4 id="5-1-用法"><a href="#5-1-用法" class="headerlink" title="5.1. 用法"></a>5.1. 用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SemaphoreTest</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; THREAD_COUNT; i++)&#123;<br>        threadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    s.acquire();<br>                    System.out.println(<span class="hljs-string">&quot;save data&quot;</span>);<br>                &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    threadPool.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-对AQS的用法"><a href="#5-2-对AQS的用法" class="headerlink" title="5.2. 对AQS的用法"></a>5.2. 对AQS的用法</h4><p>在Semaphore中有两种AQS，FairSync和NonfairSync，它们都继承了Sync类，这个Sync类是对AQS的拓展，提供了主要的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Semaphore</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-keyword">permits</span>, <span class="hljs-type">boolean</span> fair)</span> &#123;<br>    sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>(<span class="hljs-keyword">permits</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>(<span class="hljs-keyword">permits</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-2-1-acquire"><a href="#5-2-1-acquire" class="headerlink" title="5.2.1. acquire"></a>5.2.1. acquire</h5><p>Semaphore调用acquire时，实际上是调用了内部的AQS实现类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这个方法，调用到AQS里的acquireSharedInterruptibly</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        doAcquireSharedInterruptibly(arg);<br>&#125;<br></code></pre></td></tr></table></figure><p>再从AQS调用到子类的tryAcquireShared</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2694183684443567898L</span>;<br><br>    NonfairSync(<span class="hljs-type">int</span> <span class="hljs-keyword">permits</span>) &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-keyword">permits</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">return</span> nonfairTryAcquireShared(acquires);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后调用到AQS的子类、NonFairSync的父类的nonfairTryAcquireShared</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nonfairTryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>            <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                compareAndSetState(available, remaining))<br>                <span class="hljs-keyword">return</span> remaining;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-2-2-release"><a href="#5-2-2-release" class="headerlink" title="5.2.2. release"></a>5.2.2. release</h5><p>这个方法调用了sync的方法，实际上调用到了AQS层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">()</span> &#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOwnableSynchronizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br><br>        <span class="hljs-comment">// 其他部分省略</span><br>        <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>            <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>                doReleaseShared();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 其他部分省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在AQS中调用了子类Sync的的tryReleaseShared</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current + releases;<br>            <span class="hljs-keyword">if</span> (next &lt; current) <span class="hljs-comment">// overflow</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum permit count exceeded&quot;</span>);<br>            <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他部分省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-Exchanger"><a href="#6-Exchanger" class="headerlink" title="6. Exchanger"></a>6. Exchanger</h3><p>只能在两个点中间交互。</p><h4 id="6-1-用法"><a href="#6-1-用法" class="headerlink" title="6.1. 用法"></a>6.1. 用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Exchanger&lt;String&gt; exgr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exchanger</span>&lt;&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool_2</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br><span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exchangerTest</span><span class="hljs-params">()</span>&#123;<br>    threadPool_2.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;银行流水A&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;原始数据： &quot;</span> + exgr.exchange(A));<br>            &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;);<br>    threadPool_2.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;银行流水B&quot;</span>;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> exgr.exchange(<span class="hljs-string">&quot;B&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;A和B数据是否一致：&quot;</span> + A.equals(B) + <span class="hljs-string">&quot;, A录入的是：&quot;</span> + A + <span class="hljs-string">&quot;, B录入的是：&quot;</span> + B);<br>            &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;);<br>    threadPool_2.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-源码"><a href="#6-2-源码" class="headerlink" title="6.2. 源码"></a>6.2. 源码</h4><p>在类内包装了一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Participant</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Node&gt; &#123;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@sun</span>.misc.Contended <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> index;              <span class="hljs-comment">// Arena index</span><br>    <span class="hljs-type">int</span> bound;              <span class="hljs-comment">// Last recorded value of Exchanger.bound</span><br>    <span class="hljs-type">int</span> collides;           <span class="hljs-comment">// Number of CAS failures at current bound</span><br>    <span class="hljs-type">int</span> hash;               <span class="hljs-comment">// Pseudo-random for spins</span><br>    Object item;            <span class="hljs-comment">// This thread&#x27;s current item</span><br>    <span class="hljs-keyword">volatile</span> Object match;  <span class="hljs-comment">// Item provided by releasing thread</span><br>    <span class="hljs-keyword">volatile</span> Thread parked; <span class="hljs-comment">// Set to this thread when parked, else null</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-2-1-核心方法exchange"><a href="#6-2-1-核心方法exchange" class="headerlink" title="6.2.1. 核心方法exchange"></a>6.2.1. 核心方法exchange</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">exchange</span><span class="hljs-params">(V x)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Object v;<br>    <span class="hljs-comment">// 当参数为null时需要将item设置为空的对象</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> (x == <span class="hljs-literal">null</span>) ? NULL_ITEM : x; <span class="hljs-comment">// translate null args</span><br>    <span class="hljs-comment">// 注意到这里的这个表达式是整个方法的核心</span><br>    <span class="hljs-keyword">if</span> ((arena != <span class="hljs-literal">null</span> ||<br>            (v = slotExchange(item, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span> L)) == <span class="hljs-literal">null</span>) &amp;&amp;<br>        ((Thread.interrupted() || <span class="hljs-comment">// disambiguates null return</span><br>            (v = arenaExchange(item, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span> L)) == <span class="hljs-literal">null</span>)))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    <span class="hljs-keyword">return</span> (v == NULL_ITEM) ? <span class="hljs-literal">null</span> : (V) v;<br>&#125;<br>------<br>著作权归<span class="hljs-meta">@pdai</span>所有<br>原文链接：https:<span class="hljs-comment">//pdai.tech/md/java/thread/java-thread-x-juc-tool-exchanger.html</span><br></code></pre></td></tr></table></figure><p> 如果slotExchange(Object item, boolean timed, long ns)方法执行失败了就执行arenaExchange(Object item, boolean timed, long ns)方法，最后返回结果V。</p><h5 id="6-2-2-slotExchange"><a href="#6-2-2-slotExchange" class="headerlink" title="6.2.2. slotExchange"></a>6.2.2. slotExchange</h5><ul><li>如果slot不为null，则进行slot消除，成功直接返回数据V，否则失败，则创建arena消除数组。</li><li>如果slot为null，但arena不为null，则返回null，进入arenaExchange逻辑。</li><li>如果slot为null，且arena也为null，则尝试占领该slot，失败重试，成功则跳出循环进入spin+block(自旋+阻塞)模式。</li></ul><h5 id="6-2-3-arenaExchange"><a href="#6-2-3-arenaExchange" class="headerlink" title="6.2.3. arenaExchange"></a>6.2.3. arenaExchange</h5><ul><li>如果q等于null且下标在bound &amp; MMASK范围之内，则尝试占领该位置，如果成功，则采用自旋 + 阻塞的方式进行等待交换数据。</li><li>如果下标不在bound &amp; MMASK范围之内获取由于q不为null但是竞争失败的时候：消除p。加入bound 不等于当前节点的bond(b !&#x3D; p.bound)，则更新p.bound &#x3D; b，collides &#x3D; 0 ，i &#x3D; m或者m - 1。如果冲突的次数不到m 获取m 已经为最大值或者修改当前bound的值失败，则通过增加一次collides以及循环递减下标i的值；否则更新当前bound的值成功：我们令i为m+1即为此时最大的下标。最后更新当前index的值。</li></ul><h3 id="7-其他线程相关的方法"><a href="#7-其他线程相关的方法" class="headerlink" title="7. 其他线程相关的方法"></a>7. 其他线程相关的方法</h3><h4 id="7-1-通过中断优雅关闭"><a href="#7-1-通过中断优雅关闭" class="headerlink" title="7.1. 通过中断优雅关闭"></a>7.1. 通过中断优雅关闭</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSync</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">th</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;<br>                i++;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    th.start();<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>    th.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-线程的notify为何不生效"><a href="#7-2-线程的notify为何不生效" class="headerlink" title="7.2. 线程的notify为何不生效"></a>7.2. 线程的notify为何不生效</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;String&gt; threadString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    <span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNotifyAndWait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>            <span class="hljs-keyword">public</span> Integer target;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(<span class="hljs-type">int</span> target)</span>&#123;<br>                <span class="hljs-built_in">this</span>.target = target;<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                threadString.set(Instant.now().toString());<br>                <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                    <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>                        <span class="hljs-keyword">if</span>(count % <span class="hljs-number">3</span> == target)&#123;<br>                            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;   &quot;</span> + threadString.get());<br>                            count += <span class="hljs-number">1</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">th1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">0</span>));<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">th2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">th3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">2</span>));<br>        th1.start();<br><span class="hljs-comment">//        Thread.sleep(1000);</span><br>        th2.start();<br><span class="hljs-comment">//        Thread.sleep(1000);</span><br>        th3.start();<br><span class="hljs-comment">//        Thread.sleep(1000);</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>                lock.notify();<br>            &#125;<br><span class="hljs-comment">//            Thread.sleep(1000);</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这样写，notify并没有唤醒任何一个线程。可能是因为，在它notify的时候线程还未执行完，还没有进入wait状态。</p><h4 id="7-3-主线程最后关闭"><a href="#7-3-主线程最后关闭" class="headerlink" title="7.3. 主线程最后关闭"></a>7.3. 主线程最后关闭</h4><p>把所有需要的线程都join进来，需要的线程执行完以后主线程才会关闭。</p><h4 id="7-4-使用ThreadLocal"><a href="#7-4-使用ThreadLocal" class="headerlink" title="7.4. 使用ThreadLocal"></a>7.4. 使用ThreadLocal</h4><p>需要获取一个共有的ThreadLocal对象，再从这个对象里取值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;String&gt; threadString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNotifyAndWait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-keyword">public</span> Integer target;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(<span class="hljs-type">int</span> target)</span>&#123;<br>            <span class="hljs-built_in">this</span>.target = target;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>            threadString.set(Instant.now().toString());<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>                    <span class="hljs-keyword">if</span>(count % <span class="hljs-number">3</span> == target)&#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;   &quot;</span> + threadString.get());<br>                        count += <span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">th1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">th2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">1</span>));<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">th3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">2</span>));<br>    th1.start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    th2.start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    th3.start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>            lock.notify();<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-5-lock的Condition怎么用"><a href="#7-5-lock的Condition怎么用" class="headerlink" title="7.5. lock的Condition怎么用"></a>7.5. lock的Condition怎么用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-meta">@org</span>.junit.jupiter.api.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockCondition</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">lockA</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">lockB</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">lockC</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">th1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                lock.lock();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">while</span>(count % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>) &#123;<br>                        lockA.await();<br>                    &#125;<br>                    System.out.println(Thread.currentThread().getName());<br>                    count++;<br>                    lockB.signal();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    lock.unlock();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">th2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                lock.lock();<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-keyword">while</span>(count%<span class="hljs-number">3</span> != <span class="hljs-number">1</span>)&#123;<br>                        lockB.await();<br>                    &#125;<br>                    System.out.println(Thread.currentThread().getName());<br>                    count++;<br>                    lockC.signal();<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    lock.unlock();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">th3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                lock.lock();<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-keyword">while</span>(count % <span class="hljs-number">3</span> != <span class="hljs-number">2</span>)&#123;<br>                        lockC.await();<br>                    &#125;<br>                    System.out.println(Thread.currentThread().getName());<br>                    count++;<br>                    lockA.signal();<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    lock.unlock();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;);<br><br>    th1.start();<br>    th2.start();<br>    th3.start();<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>实现拓展的方式：SPI 拦截调用</title>
    <link href="/2023/10/16/20231016-%E5%AE%9E%E7%8E%B0%E6%8B%93%E5%B1%95%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9ASPI%20%E6%8B%A6%E6%88%AA%E8%B0%83%E7%94%A8/"/>
    <url>/2023/10/16/20231016-%E5%AE%9E%E7%8E%B0%E6%8B%93%E5%B1%95%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9ASPI%20%E6%8B%A6%E6%88%AA%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="1-SPI"><a href="#1-SPI" class="headerlink" title="1. SPI"></a>1. SPI</h3><h4 id="1-1-什么是SPI机制"><a href="#1-1-什么是SPI机制" class="headerlink" title="1.1 什么是SPI机制"></a>1.1 什么是SPI机制</h4><p>​这个问题可以跟API比较起来解释。</p><table><thead><tr><th></th><th><strong>全称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>API</strong></td><td>application provider interface</td><td>“接口”位于“实现方”所在的“包”中</td></tr><tr><td><strong>SPI</strong></td><td>service provider interfase</td><td>“接口”位于“调用方”所在的“包”中</td></tr></tbody></table><p>​SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。</p><p><img src="/img/20231016-%E5%AE%9E%E7%8E%B0%E6%8B%93%E5%B1%95%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9ASPI%E3%80%81%E6%8B%A6%E6%88%AA%E8%B0%83%E7%94%A8-01.jpg" alt="Java SPI机制"></p><p>​当服务的提供者提供了一种接口的实现之后，需要在classpath下的META-INF&#x2F;..的指定目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。</p><p>参考资料：Java常用机制 - SPI机制详解  <a href="https://pdai.tech/md/java/advanced/java-advanced-spi.html">https://pdai.tech/md/java/advanced/java-advanced-spi.html</a></p><h4 id="1-2-SPI的几种实现"><a href="#1-2-SPI的几种实现" class="headerlink" title="1.2 SPI的几种实现"></a>1.2 SPI的几种实现</h4><table><thead><tr><th></th><th><strong>核心类</strong></th><th><strong>文件方式</strong></th><th><strong>获取某个固定的实现</strong></th></tr></thead><tbody><tr><td>JDK SPI</td><td>ServiceLoader</td><td>每个扩展点单独一个文件</td><td>不支持，只能按顺序获取所有实现</td></tr><tr><td>Dubbo SPI</td><td>ExtensionLoader</td><td>每个扩展点单独一个文件</td><td>有“别名”的概念，可以通过名称获取扩展点的某个固定实现，配合Dubbo SPI的注解很方便</td></tr><tr><td>Spring SPI</td><td>SpringFactoriesLoader</td><td>所有的扩展点在一个文件</td><td>不支持，只能按顺序获取所有实现。但由于Spring Boot ClassLoader会优先加载用户代码中的文件，所以可以保证用户自定义的spring.factoires文件在第一个，通过获取第一个factory的方式就可以固定获取自定义的扩展</td></tr></tbody></table><p>参考资料：JDK&#x2F;Dubbo&#x2F;Spring 三种 SPI 机制，谁更好？ <a href="https://developer.huawei.com/consumer/cn/forum/topic/0201545775459280256">https://developer.huawei.com/consumer/cn/forum/topic/0201545775459280256</a> </p><h4 id="1-3-简单的实现用例"><a href="#1-3-简单的实现用例" class="headerlink" title="1.3 简单的实现用例"></a>1.3 简单的实现用例</h4><h5 id="1-3-1-jdk-SPI实现举例"><a href="#1-3-1-jdk-SPI实现举例" class="headerlink" title="1.3.1 jdk SPI实现举例"></a>1.3.1 jdk SPI实现举例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Search</span> &#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">searchDoc</span><span class="hljs-params">(String keyword)</span>;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSearch</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Search</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">searchDoc</span><span class="hljs-params">(String keyword)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;文件搜索 &quot;</span>+keyword);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseSearch</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Search</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">searchDoc</span><span class="hljs-params">(String keyword)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;数据搜索 &quot;</span>+keyword);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">src.main.com.channon.util.spi.javaSPI.DatabaseSearch<br>src.main.com.channon.util.spi.javaSPI.FileSearch<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javaSPITest</span><span class="hljs-params">()</span>&#123;<br>    ServiceLoader&lt;Search&gt; s = ServiceLoader.load(Search.class);<br>    Iterator&lt;Search&gt; iterator = s.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        <span class="hljs-type">Search</span> <span class="hljs-variable">search</span> <span class="hljs-operator">=</span>  iterator.next();<br>        search.searchDoc(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">数据搜索 hello world<br>文件搜索 hello world<br></code></pre></td></tr></table></figure><h5 id="1-3-2-dubbo-SPI实现举例"><a href="#1-3-2-dubbo-SPI实现举例" class="headerlink" title="1.3.2 dubbo SPI实现举例"></a>1.3.2 dubbo SPI实现举例</h5><p>​这里实现了一个带有包装的SPI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SPI</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Robot</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OptimusPrime</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Robot</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, this is optimus prime.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BumbleBee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Robot</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, this is bumble bee.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RobotWrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Robot</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Robot robot;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RobotWrapper</span><span class="hljs-params">(Robot robot)</span>&#123;<br>        <span class="hljs-built_in">this</span>.robot = robot;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;包装方法开始&quot;</span>);<br>        robot.sayHello();<br>        System.out.println(<span class="hljs-string">&quot;包装方法结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">a = src.main.com.channon.util.dubbo.<span class="hljs-type">OptimusPrime</span><br><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> src.main.com.channon.util.dubbo.BumbleBee<br><br>src.main.com.channon.util.dubbo.RobotWrapper<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spiTest</span><span class="hljs-params">()</span>&#123;<br>    ExtensionLoader&lt;Robot&gt; extensionLoader = ExtensionLoader.getExtensionLoader(Robot.class);<br>    <span class="hljs-type">Robot</span> <span class="hljs-variable">optimus</span> <span class="hljs-operator">=</span> extensionLoader.getExtension(<span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-type">Robot</span> <span class="hljs-variable">bumble</span> <span class="hljs-operator">=</span> extensionLoader.getExtension(<span class="hljs-string">&quot;b&quot;</span>);<br>    bumble.sayHello();<br>    optimus.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">……<br>包装方法开始<br>Hello, <span class="hljs-built_in">this</span> is bumble bee.<br>包装方法结束<br>包装方法开始<br>Hello, <span class="hljs-built_in">this</span> is optimus prime.<br>包装方法结束<br></code></pre></td></tr></table></figure><h4 id="1-4-SPI的应用举例"><a href="#1-4-SPI的应用举例" class="headerlink" title="1.4 SPI的应用举例"></a>1.4 SPI的应用举例</h4><h5 id="1-4-1-jdk-SPI的使用——JDBC-Driver"><a href="#1-4-1-jdk-SPI的使用——JDBC-Driver" class="headerlink" title="1.4.1 jdk SPI的使用——JDBC Driver"></a>1.4.1 jdk SPI的使用——JDBC Driver</h5><p>​在JDBC4.0之前，我们开发有连接数据库的时候，通常会用Class.forName(“com.mysql.jdbc.Driver”)这句先加载数据库相关的驱动，然后再进行获取连接等的操作。<strong>而JDBC4.0之后不需要用Class.forName(“com.mysql.jdbc.Driver”)来加载驱动，直接获取连接就可以了，现在这种方式就是使用了Java的SPI扩展机制来实现</strong>。</p><h6 id="JDBC接口定义"><a href="#JDBC接口定义" class="headerlink" title="JDBC接口定义"></a>JDBC接口定义</h6><p>​首先在java中定义了接口java.sql.Driver，并没有具体的实现，具体的实现都是由不同厂商来提供的。</p><h6 id="mysql实现"><a href="#mysql实现" class="headerlink" title="mysql实现"></a>mysql实现</h6><p>​在mysql的jar包mysql-connector-java-6.0.6.jar中，可以找到META-INF&#x2F;services目录，该目录下会有一个名字为java.sql.Driver的文件，文件内容是com.mysql.cj.jdbc.Driver，这里面的内容就是针对Java中定义的接口的实现。</p><h6 id="postgresql实现"><a href="#postgresql实现" class="headerlink" title="postgresql实现"></a>postgresql实现</h6><p>​同样在postgresql的jar包postgresql-42.0.0.jar中，也可以找到同样的配置文件，文件内容是org.postgresql.Driver，这是postgresql对Java的java.sql.Driver的实现。</p><h6 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h6><p>​上面说了，现在使用SPI扩展来加载具体的驱动，我们在Java中写连接数据库的代码的时候，不需要再使用Class.forName(“com.mysql.jdbc.Driver”)来加载驱动了，而是直接使用如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:xxxx://xxxx:xxxx/xxxx&quot;</span>;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username,password);<br>.....<br></code></pre></td></tr></table></figure><p>​这里并没有涉及到spi的使用，接着看下面的解析。</p><h6 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h6><p>​上面的使用方法，就是我们普通的连接数据库的代码，并没有涉及到SPI的东西，但是有一点我们可以确定的是，我们没有写有关具体驱动的硬编码Class.forName(“com.mysql.jdbc.Driver”)！</p><p>​上面的代码可以直接获取数据库连接进行操作，但是跟SPI有啥关系呢？上面代码没有了加载驱动的代码，我们怎么去确定使用哪个数据库连接的驱动呢？这里就涉及到使用Java的SPI扩展机制来查找相关驱动的东西了，关于驱动的查找其实都在DriverManager中，DriverManager是Java中的实现，用来获取数据库连接，在DriverManager中有一个静态代码块如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    loadInitialDrivers();<br>    println(<span class="hljs-string">&quot;JDBC DriverManager initialized&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到是加载实例化驱动的，接着看loadInitialDrivers方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadInitialDrivers</span><span class="hljs-params">()</span> &#123;<br>    String drivers;<br>    <span class="hljs-keyword">try</span> &#123;<br>        drivers = AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;String&gt;() &#123;<br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> System.getProperty(<span class="hljs-string">&quot;jdbc.drivers&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        drivers = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// If the driver is packaged as a Service Provider, load it.</span><br>    <span class="hljs-comment">// Get all the drivers through the classloader</span><br>    <span class="hljs-comment">// exposed as a java.sql.Driver.class service.</span><br>    <span class="hljs-comment">// ServiceLoader.load() replaces the sun.misc.Providers()</span><br><br>    AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;<br>        <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>            ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);<br>            Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();<br><br>            <span class="hljs-comment">/* Load these drivers, so that they can be instantiated.</span><br><span class="hljs-comment">                 * It may be the case that the driver class may not be there</span><br><span class="hljs-comment">                 * i.e. there may be a packaged driver with the service class</span><br><span class="hljs-comment">                 * as implementation of java.sql.Driver but the actual class</span><br><span class="hljs-comment">                 * may be missing. In that case a java.util.ServiceConfigurationError</span><br><span class="hljs-comment">                 * will be thrown at runtime by the VM trying to locate</span><br><span class="hljs-comment">                 * and load the service.</span><br><span class="hljs-comment">                 *</span><br><span class="hljs-comment">                 * Adding a try catch block to catch those runtime errors</span><br><span class="hljs-comment">                 * if driver not available in classpath but it&#x27;s</span><br><span class="hljs-comment">                 * packaged as service and that service is there in classpath.</span><br><span class="hljs-comment">                 */</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">while</span>(driversIterator.hasNext()) &#123;<br>                    driversIterator.next();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span>(Throwable t) &#123;<br>                <span class="hljs-comment">// Do nothing</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;);<br><br>    println(<span class="hljs-string">&quot;DriverManager.initialize: jdbc.drivers = &quot;</span> + drivers);<br><br>    <span class="hljs-keyword">if</span> (drivers == <span class="hljs-literal">null</span> || drivers.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    String[] driversList = drivers.split(<span class="hljs-string">&quot;:&quot;</span>);<br>    println(<span class="hljs-string">&quot;number of Drivers:&quot;</span> + driversList.length);<br>    <span class="hljs-keyword">for</span> (String aDriver : driversList) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            println(<span class="hljs-string">&quot;DriverManager.Initialize: loading &quot;</span> + aDriver);<br>            Class.forName(aDriver, <span class="hljs-literal">true</span>,<br>                          ClassLoader.getSystemClassLoader());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            println(<span class="hljs-string">&quot;DriverManager.Initialize: load failed: &quot;</span> + ex);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​上面的代码主要步骤是：</p><ul><li>从系统变量中获取有关驱动的定义。</li><li>使用SPI来获取驱动的实现。</li><li>遍历使用SPI获取到的具体实现，实例化各个实现类。</li><li>根据第一步获取到的驱动列表来实例化具体实现类。</li></ul><p>​我们主要关注2,3步，这两步是SPI的用法，首先看第二步，使用SPI来获取驱动的实现，对应的代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);<br></code></pre></td></tr></table></figure><p>​这里没有去META-INF&#x2F;services目录下查找配置文件，也没有加载具体实现类，做的事情就是封装了我们的接口类型和类加载器，并初始化了一个迭代器。</p><p>​接着看第三步，遍历使用SPI获取到的具体实现，实例化各个实现类，对应的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取迭代器</span><br>Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();<br><span class="hljs-comment">//遍历所有的驱动实现</span><br><span class="hljs-keyword">while</span>(driversIterator.hasNext()) &#123;<br>    driversIterator.next();<br>&#125;<br></code></pre></td></tr></table></figure><p>​在遍历的时候，首先调用driversIterator.hasNext()方法，这里会搜索classpath下以及jar包中所有的META-INF&#x2F;services目录下的java.sql.Driver文件，并找到文件中的实现类的名字，此时并没有实例化具体的实现类（ServiceLoader具体的源码实现在下面）。</p><p>​然后是调用driversIterator.next();方法，此时就会根据驱动名字具体实例化各个实现类了。现在驱动就被找到并实例化了。</p><p>参考资料：Java常用机制 - SPI机制详解 <a href="https://pdai.tech/md/java/advanced/java-advanced-spi.html">https://pdai.tech/md/java/advanced/java-advanced-spi.html</a> </p><h5 id="1-4-2-dubbo-SPI的使用——dubbo的拓展点"><a href="#1-4-2-dubbo-SPI的使用——dubbo的拓展点" class="headerlink" title="1.4.2 dubbo SPI的使用——dubbo的拓展点"></a>1.4.2 dubbo SPI的使用——dubbo的拓展点</h5><p>​dubbo在本身的服务框架中插入了多个拓展点，如下图</p><p><img src="/img/20231016-%E5%AE%9E%E7%8E%B0%E6%8B%93%E5%B1%95%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9ASPI%E3%80%81%E6%8B%A6%E6%88%AA%E8%B0%83%E7%94%A8-02.jpg" alt="dubbo的扩展能力"></p><p>​依照说明定义相应的SPI实现类，即可实现功能拓展。dubbo SPI的工作过程如下：</p><p><img src="/img/20231016-%E5%AE%9E%E7%8E%B0%E6%8B%93%E5%B1%95%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9ASPI%E3%80%81%E6%8B%A6%E6%88%AA%E8%B0%83%E7%94%A8-03.jpg" alt="dubbo SPI的执行过程"></p><h6 id="ExtensionLoader源码解析"><a href="#ExtensionLoader源码解析" class="headerlink" title="ExtensionLoader源码解析"></a>ExtensionLoader源码解析</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getExtension</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> wrap)</span> &#123;<br>    checkDestroyed();<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(name)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Extension name == null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;true&quot;</span>.equals(name)) &#123;<br>        <span class="hljs-keyword">return</span> getDefaultExtension();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> name;<br>    <span class="hljs-keyword">if</span> (!wrap) &#123;<br>        cacheKey += <span class="hljs-string">&quot;_origin&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> Holder&lt;Object&gt; holder = getOrCreateHolder(cacheKey);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> holder.get();<br>    <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span> (holder) &#123;<br>            instance = holder.get();<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                instance = createExtension(name, wrap);<br>                holder.set(instance);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (T) instance;<br>&#125;<br></code></pre></td></tr></table></figure><p>​getExtension是ExtensionLoader的入口，这段代码比较简单，查询缓存，缓存不命中就创建拓展。接下来看创建方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> T <span class="hljs-title function_">createExtension</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> wrap)</span> &#123;<br>    Class&lt;?&gt; clazz = getExtensionClasses().get(name);<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span> || unacceptableExceptions.contains(name)) &#123;<br>        <span class="hljs-keyword">throw</span> findException(name);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> (T) extensionInstances.get(clazz);<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            extensionInstances.putIfAbsent(clazz, createExtensionInstance(clazz));<br>            instance = (T) extensionInstances.get(clazz);<br>            instance = postProcessBeforeInitialization(instance, name);<br>            injectExtension(instance);<br>            instance = postProcessAfterInitialization(instance, name);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (wrap) &#123;<br>            List&lt;Class&lt;?&gt;&gt; wrapperClassesList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">if</span> (cachedWrapperClasses != <span class="hljs-literal">null</span>) &#123;<br>                wrapperClassesList.addAll(cachedWrapperClasses);<br>                wrapperClassesList.sort(WrapperComparator.COMPARATOR);<br>                Collections.reverse(wrapperClassesList);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(wrapperClassesList)) &#123;<br>                <span class="hljs-keyword">for</span> (Class&lt;?&gt; wrapperClass : wrapperClassesList) &#123;<br>                    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> wrapperClass.getAnnotation(Wrapper.class);<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> (wrapper == <span class="hljs-literal">null</span>) ||<br>                        ((ArrayUtils.isEmpty(wrapper.matches()) || ArrayUtils.contains(wrapper.matches(), name)) &amp;&amp;<br>                            !ArrayUtils.contains(wrapper.mismatches(), name));<br>                    <span class="hljs-keyword">if</span> (match) &#123;<br>                        instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));<br>                        instance = postProcessAfterInitialization(instance, name);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Warning: After an instance of Lifecycle is wrapped by cachedWrapperClasses, it may not still be Lifecycle instance, this application may not invoke the lifecycle.initialize hook.</span><br>        initExtension(instance);<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Extension instance (name: &quot;</span> + name + <span class="hljs-string">&quot;, class: &quot;</span> +<br>            type + <span class="hljs-string">&quot;) couldn&#x27;t be instantiated: &quot;</span> + t.getMessage(), t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​createExtension 方法的逻辑稍复杂一下，包含了如下的步骤：</p><ol><li>通过 getExtensionClasses 获取所有的拓展类</li><li>通过反射创建拓展对象</li><li>向拓展对象中注入依赖</li><li>将拓展对象包裹在相应的 Wrapper 对象中</li><li>初始化拓展对象</li></ol><p>以上步骤中，第一个步骤是加载拓展类的关键，第三和第四个步骤是 Dubbo IOC 与 AOP 的具体实现，留待后面分析。</p><p>参考资料：Dubbo SPI 概述 <a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/overview/">https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/overview/</a> </p><h3 id="2-拦截调用实现拓展——Mybatis的Interceptor"><a href="#2-拦截调用实现拓展——Mybatis的Interceptor" class="headerlink" title="2. 拦截调用实现拓展——Mybatis的Interceptor"></a>2. 拦截调用实现拓展——Mybatis的Interceptor</h3><p>​网上找了一下mybatis执行流程的图：</p><p><img src="/img/20231016-%E5%AE%9E%E7%8E%B0%E6%8B%93%E5%B1%95%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9ASPI%E3%80%81%E6%8B%A6%E6%88%AA%E8%B0%83%E7%94%A8-04.jpg" alt="MyBatis层次结构"></p><p>​默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>​通过实现这些插件，就可以实现对最后执行的sql的修改。</p><h4 id="2-1-举例：PageHelper"><a href="#2-1-举例：PageHelper" class="headerlink" title="2.1 举例：PageHelper"></a>2.1 举例：PageHelper</h4><p>​PageHelper的核心类就是interceptor的一个实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;@Signature(</span><br><span class="hljs-meta">    type = Executor.class,</span><br><span class="hljs-meta">    method = &quot;query&quot;,</span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;</span><br><span class="hljs-meta">), @Signature(</span><br><span class="hljs-meta">    type = Executor.class,</span><br><span class="hljs-meta">    method = &quot;query&quot;,</span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;</span><br><span class="hljs-meta">)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br>    ……<br>&#125;<br><span class="hljs-meta">@Intercepts(&#123;@Signature(</span><br><span class="hljs-meta">    type = Executor.class,</span><br><span class="hljs-meta">    method = &quot;query&quot;,</span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;</span><br><span class="hljs-meta">), @Signature(</span><br><span class="hljs-meta">    type = Executor.class,</span><br><span class="hljs-meta">    method = &quot;query&quot;,</span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;</span><br><span class="hljs-meta">)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QueryInterceptor</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​上面的注解可以配置它相应的拦截点，如这个拦截点位于Executor。</p><h4 id="2-2-举例：sharding-sphere"><a href="#2-2-举例：sharding-sphere" class="headerlink" title="2.2 举例：sharding sphere"></a>2.2 举例：sharding sphere</h4><p>​它的核心类是ShardingSelectInterceptor和ShardingInsertInterceptor。</p><p>​（未找到代码，暂时留空）</p><h4 id="2-3-Mybatis的Interceptor是如何实现的"><a href="#2-3-Mybatis的Interceptor是如何实现的" class="headerlink" title="2.3 Mybatis的Interceptor是如何实现的"></a>2.3 Mybatis的Interceptor是如何实现的</h4><p>​在mybatis的Configuration类里实现了插入handler的代码，在上层调用时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title function_">newParameterHandler</span><span class="hljs-params">(MappedStatement mappedStatement, Object parameterObject,</span><br><span class="hljs-params">    BoundSql boundSql)</span> &#123;<br>  <span class="hljs-type">ParameterHandler</span> <span class="hljs-variable">parameterHandler</span> <span class="hljs-operator">=</span> mappedStatement.getLang().createParameterHandler(mappedStatement,<br>      parameterObject, boundSql);<br>  <span class="hljs-keyword">return</span> (ParameterHandler) interceptorChain.pluginAll(parameterHandler);<br>&#125;<br><br><span class="hljs-keyword">public</span> ResultSetHandler <span class="hljs-title function_">newResultSetHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds,</span><br><span class="hljs-params">    ParameterHandler parameterHandler, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>  <span class="hljs-type">ResultSetHandler</span> <span class="hljs-variable">resultSetHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResultSetHandler</span>(executor, mappedStatement, parameterHandler,<br>      resultHandler, boundSql, rowBounds);<br>  <span class="hljs-keyword">return</span> (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);<br>&#125;<br><br><span class="hljs-keyword">public</span> StatementHandler <span class="hljs-title function_">newStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement,</span><br><span class="hljs-params">    Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>  <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">statementHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoutingStatementHandler</span>(executor, mappedStatement, parameterObject,<br>      rowBounds, resultHandler, boundSql);<br>  <span class="hljs-keyword">return</span> (StatementHandler) interceptorChain.pluginAll(statementHandler);<br>&#125;<br><br><span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">newExecutor</span><span class="hljs-params">(Transaction transaction)</span> &#123;<br>  <span class="hljs-keyword">return</span> newExecutor(transaction, defaultExecutorType);<br>&#125;<br><br><span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">newExecutor</span><span class="hljs-params">(Transaction transaction, ExecutorType executorType)</span> &#123;<br>  executorType = executorType == <span class="hljs-literal">null</span> ? defaultExecutorType : executorType;<br>  Executor executor;<br>  <span class="hljs-keyword">if</span> (ExecutorType.BATCH == executorType) &#123;<br>    executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BatchExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ExecutorType.REUSE == executorType) &#123;<br>    executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReuseExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (cacheEnabled) &#123;<br>    executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CachingExecutor</span>(executor);<br>  &#125;<br>  <span class="hljs-keyword">return</span> (Executor) interceptorChain.pluginAll(executor);<br>&#125;<br></code></pre></td></tr></table></figure><p>​上面代码功能是：对statementHandler 插入所有的Interceptor以便进行拦截，InterceptorChain里保存了所有的拦截器，它在Configuration 对象被构造出来的时候创建。</p><p>参考资料：MyBatis源码剖析 - MyBatis 插件之拦截器（Interceptor）实现原理  <a href="https://blog.csdn.net/top_code/article/details/55657776">https://blog.csdn.net/top_code/article/details/55657776</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一些PostgreSQL跟MySQL的细微差别</title>
    <link href="/2023/10/11/20231011-%E4%B8%80%E4%BA%9BPostgreSQL%E8%B7%9FMySQL%E7%9A%84%E7%BB%86%E5%BE%AE%E5%B7%AE%E5%88%AB/"/>
    <url>/2023/10/11/20231011-%E4%B8%80%E4%BA%9BPostgreSQL%E8%B7%9FMySQL%E7%9A%84%E7%BB%86%E5%BE%AE%E5%B7%AE%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="一些PostgreSQL跟MySQL的细微差别"><a href="#一些PostgreSQL跟MySQL的细微差别" class="headerlink" title="一些PostgreSQL跟MySQL的细微差别"></a>一些PostgreSQL跟MySQL的细微差别</h3><h3 id="1-PostgreSQL和MySQL的MVCC"><a href="#1-PostgreSQL和MySQL的MVCC" class="headerlink" title="1. PostgreSQL和MySQL的MVCC"></a>1. PostgreSQL和MySQL的MVCC</h3><p>当同一个数据被两个事务写的时候，MySQL（Innodb）的默认实现是使用悲观锁行锁，锁住当前行，禁止其他事务读写。而PostgreSQL使用了MVCC，也就是记录了数据的版本号，当事务A写数据时，事务B仍可读到旧版本的数据。</p><h4 id="1-1-postgres-mvcc-一个事务读，一个事务写"><a href="#1-1-postgres-mvcc-一个事务读，一个事务写" class="headerlink" title="1.1. postgres mvcc 一个事务读，一个事务写"></a>1.1. postgres mvcc 一个事务读，一个事务写</h4><p>A事务读取数据，获取自己的快照</p><p>B事务读取数据</p><p>A事务修改完成，提交，更新数据版本号</p><h4 id="1-2-postgres-mvcc-两个事务写"><a href="#1-2-postgres-mvcc-两个事务写" class="headerlink" title="1.2. postgres mvcc 两个事务写"></a>1.2. postgres mvcc 两个事务写</h4><p>乐观锁，会等到第一个事务执行完再执行第二个数据。</p><p>A事务读取数据，获取自己的快照</p><p>B事务读取数据，获取自己的快照</p><p>A事务修改完成，提交，更新数据版本号</p><p>B事务修改完成，提交，发现自己版本号较低，重新获取快照修改</p><p>B事务修改完成，提交，更新数据版本号</p><h4 id="1-3-怎么启用mysql的mvcc？"><a href="#1-3-怎么启用mysql的mvcc？" class="headerlink" title="1.3. 怎么启用mysql的mvcc？"></a>1.3. 怎么启用mysql的mvcc？</h4><p>​mysql5.6以上版本才支持，RR隔离级别才支持</p><h4 id="1-4-mvcc跟行锁有什么区别？"><a href="#1-4-mvcc跟行锁有什么区别？" class="headerlink" title="1.4. mvcc跟行锁有什么区别？"></a>1.4. mvcc跟行锁有什么区别？</h4><p>​两个请求同时抵达数据库，每个请求是一个独立事务。A请求修改数据，B请求查询数据，A请求先到。</p><p>​在MySQL的机制下，A事务会锁住这一行数据，B无法读取。等到A释放行锁后，B才可以读取数据。</p><p>​在MVCC机制下，A会新增一行记录，不锁数据。B可以无阻塞地查到旧版本的数据。</p><h3 id="2-PostgreSQL和MySQL的索引"><a href="#2-PostgreSQL和MySQL的索引" class="headerlink" title="2. PostgreSQL和MySQL的索引"></a>2. PostgreSQL和MySQL的索引</h3><p>​mysql只能在整张表上建立索引，但pg可以在某些列上建立索引。</p><p>​postgres还支持更多的索引类型。</p><p>​mysql仅支持B树索引和hash索引，postgres还支持GiST、SP-GiST等。</p><p>​mysql仅支持整张表建立索引，pg可以建立部分索引、表达式索引、多列索引。</p><p>​postgres支持并发索引。</p><h3 id="3-PostgreSQL和MySQL对SQL的优化"><a href="#3-PostgreSQL和MySQL对SQL的优化" class="headerlink" title="3. PostgreSQL和MySQL对SQL的优化"></a>3. PostgreSQL和MySQL对SQL的优化</h3><h4 id="3-1-查询计划优化"><a href="#3-1-查询计划优化" class="headerlink" title="3.1. 查询计划优化"></a>3.1. 查询计划优化</h4><p>​PostgreSQL的优化器会考虑表之间的统计相关信息,调整Join顺序以减少记录数。MySQL的优化器基本按照Join语句顺序处理。</p><p>​PostgreSQL会估算不同的索引在过滤记录数方面的效果,选用最有效的索引。MySQL的选择较简单。</p><h4 id="3-2-统计信息"><a href="#3-2-统计信息" class="headerlink" title="3.2. 统计信息"></a>3.2. 统计信息</h4><p>​PostgreSQL自动收集并利用各种统计信息进行查询优化,包括列相关性、distinct值比例等。MySQL只有基础的表级统计信息。</p><h3 id="4-PostgreSQL的堆表和InnoDB中的索引表"><a href="#4-PostgreSQL的堆表和InnoDB中的索引表" class="headerlink" title="4. PostgreSQL的堆表和InnoDB中的索引表"></a>4. PostgreSQL的堆表和InnoDB中的索引表</h3><p>​postgres是堆表，追加写入，主键可以不连续。innodb索引表，涉及页分裂和页合并，主键最好连续。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中的软引用和它的测试</title>
    <link href="/2023/09/07/20230907-Java%E4%B8%AD%E7%9A%84%E8%BD%AF%E5%BC%95%E7%94%A8%E5%92%8C%E5%AE%83%E7%9A%84%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/09/07/20230907-Java%E4%B8%AD%E7%9A%84%E8%BD%AF%E5%BC%95%E7%94%A8%E5%92%8C%E5%AE%83%E7%9A%84%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="Java中的软引用和它的测试"><a href="#Java中的软引用和它的测试" class="headerlink" title="Java中的软引用和它的测试"></a>Java中的软引用和它的测试</h3><h4 id="软引用介绍"><a href="#软引用介绍" class="headerlink" title="软引用介绍"></a>软引用介绍</h4><h3 id="软引用和它的测试"><a href="#软引用和它的测试" class="headerlink" title="软引用和它的测试"></a>软引用和它的测试</h3><p>​将被回收的困难程度排序，应该是强引用&gt;软引用&gt;弱引用。对比软引用和对引用，软引用的回收时间是不可预测的，它仅在内存紧张的GC进行回收。而弱引用会在下一次GC时被回收。</p><h4 id="测试设计"><a href="#测试设计" class="headerlink" title="测试设计"></a>测试设计</h4><p>​为了验证它的回收，我们可以创建一个持有SoftReference的list，不断往里塞大对象，不断触发GC，查看结果。注，内存紧张回收后，该对象被回收，但指向该对象的指针没有被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;<span class="hljs-type">byte</span>[]&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">100</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;first data in list: &quot;</span> + list.get(<span class="hljs-number">0</span>).get());<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSoftReference</span><span class="hljs-params">()</span>&#123;<br>    ArrayList&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;<span class="hljs-type">byte</span>[]&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">100</span>]));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>        () -&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;soft reference list size: &quot;</span> + list.size());<br>                System.out.println(<span class="hljs-string">&quot;first data in list: &quot;</span> + list.get(<span class="hljs-number">0</span>).get());<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">300L</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    ).start();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.currentThread().join();<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>        System.exit(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置JVM参数如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">-<span class="hljs-keyword">ea</span> -<span class="hljs-keyword">verbose</span>:gc -Xms4m -Xmx4m -Xmn2m <br></code></pre></td></tr></table></figure><h4 id="分析测试结果"><a href="#分析测试结果" class="headerlink" title="分析测试结果"></a>分析测试结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;first data in list: &quot;</span> + list.get(<span class="hljs-number">0</span>).get());<br></code></pre></td></tr></table></figure><p>​上面语句不会报空指针异常，这说明GC回收了软引用对象后，并没有回收软引用变量本身，如果希望软引用变量被回收，最好将它添加到reference queue再手动回收。</p><p>打印日志如下</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3039</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2586</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0083289</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3039</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2610</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0100043</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">soft</span> <span class="hljs-variable">reference</span> <span class="hljs-variable">list</span> <span class="hljs-variable">size</span><span class="hljs-operator">:</span> <span class="hljs-number">1</span><br><span class="hljs-variable">first</span> <span class="hljs-variable">data</span> <span class="hljs-variable">in</span> <span class="hljs-variable">list</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">@</span><span class="hljs-number">2781</span><span class="hljs-variable">fef4</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3035</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2732</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0090069</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3039</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2896</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0137084</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3029</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3007</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0065464</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3021</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2986</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0062080</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3029</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3010</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0056912</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Ergonomics</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3028</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">3010</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0059427</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Full</span> <span class="hljs-variable">GC</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">Allocation</span> <span class="hljs-built_in">Failure</span><span class="hljs-punctuation">)</span>  <span class="hljs-number">3010</span><span class="hljs-built_in">K</span><span class="hljs-operator">-&gt;</span><span class="hljs-number">2704</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">(</span><span class="hljs-number">3584</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-number">0.0124300</span> <span class="hljs-variable">secs</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">soft</span> <span class="hljs-variable">reference</span> <span class="hljs-variable">list</span> <span class="hljs-variable">size</span><span class="hljs-operator">:</span> <span class="hljs-number">1</span><br><span class="hljs-variable">first</span> <span class="hljs-variable">data</span> <span class="hljs-variable">in</span> <span class="hljs-variable">list</span><span class="hljs-operator">:</span> <span class="hljs-variable">null</span><br></code></pre></td></tr></table></figure><p>​通过这段代码我们可以观察到，在GC的初始几次循环中尽管发生了垃圾回收，但是软引用对象还没有被回收。这是因为JVM认为内存空间还充足,可以继续保留软引用对象。但是随着程序运行，内存空间逐渐紧张，在某一次GC过程中，JVM终于决定回收软引用对象以释放更多内存。此时我们打印软引用所引用的对象,其值为null。这表示软引用对象已经被回收了。</p><p>​但需要注意的是，原本指向这个软引用对象的软引用变量list本身还存在，它仍然保持对这个已经被回收对象的引用，只是这个引用现在无效了，如下图。如果程序不及时清理这种无效引用,可能会渐渐占用较多内存。</p><p><img src="/img/230907-%E8%BD%AF%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%E5%9B%9E%E6%94%B6.jpg" alt="230907-软引用变量回收"></p><h4 id="软引用变量的回收"><a href="#软引用变量的回收" class="headerlink" title="软引用变量的回收"></a>软引用变量的回收</h4><p>​为了避免上述情况，我们可以主动回收软引用变量。</p><h5 id="放入引用队列进行回收"><a href="#放入引用队列进行回收" class="headerlink" title="放入引用队列进行回收"></a>放入引用队列进行回收</h5><p>将软引用变量放入引用队列里，在回收的时候手动释放它。将创建对象并塞入对象的代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> ArrayList&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>ReferenceQueue&lt;<span class="hljs-type">byte</span>[]&gt; referenceQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;&gt;();<br><br> <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;    <br>     list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;<span class="hljs-type">byte</span>[]&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">100</span>], referenceQueue));<br> &#125;<br></code></pre></td></tr></table></figure><p>​    使用另一个线程不断扫描referenceQueue，当软引用对象被回收时，软引用变量就会被放入referenceQueue中，我们可以通过手动把它设置为null，或者从list中移除它来回收。</p><h5 id="WeakHashMap进行回收"><a href="#WeakHashMap进行回收" class="headerlink" title="WeakHashMap进行回收"></a>WeakHashMap进行回收</h5><p>​另外，也可以使用WeakHashMap来储存，储存的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">WeakHashMap&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;, <span class="hljs-type">byte</span>[]&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakHashMap</span>&lt;&gt;();<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>SoftReference&lt;<span class="hljs-type">byte</span>[]&gt; obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">100</span>]);<br>    map.put(obj, obj.get());<br>    System.out.println(<span class="hljs-string">&quot;add data in map.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>命令行输出</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tex">[Full GC (Ergonomics)  3014K-&gt;2907K(3584K), 0.0063295 secs]<br>soft reference map size: 2<br>first data in map: java.lang.ref.SoftReference@4c67258e=[B@58a828a3<br>[Full GC (Ergonomics)  2912K-&gt;2807K(3584K), 0.0058464 secs]<br>add data in map.<br>[Full GC (Ergonomics)  2913K-&gt;2807K(3584K), 0.0080876 secs]<br>add data in map.<br>[Full GC (Ergonomics)  2912K-&gt;2807K(3584K), 0.0067576 secs]<br>add data in map.<br>soft reference map size: 1<br>first data in map: java.lang.ref.SoftReference@2b0d69c0=[B@1daaadd2<br></code></pre></td></tr></table></figure><p>​分析日志，可以看到，最开始map中已经有两个对象，后面也在不断往map中插入数据。但经过几轮回收后，map size变为了1。这说明，JVM中间经过了一次内存紧张的回收，将我们建立的软引用变量回收了，而在下一次回收中，weakHashMap识别到它的value被回收，于是主动删除了这个键值对。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>写一个用zk监听变化的Kafka Consumer</title>
    <link href="/2023/09/02/20230903-%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%A8zk%E7%9B%91%E5%90%AC%E5%8F%98%E5%8C%96%E7%9A%84kafkaconsumer/"/>
    <url>/2023/09/02/20230903-%E5%86%99%E4%B8%80%E4%B8%AA%E7%94%A8zk%E7%9B%91%E5%90%AC%E5%8F%98%E5%8C%96%E7%9A%84kafkaconsumer/</url>
    
    <content type="html"><![CDATA[<p>功能简介：</p><ol><li>写一个kafka consumer manager类</li><li>实现一个具体的kafka consumer</li><li>注册zk监听器，监听zk变化修改consumer订阅的topic</li></ol><h3 id="1-写一个kafka-consumer-manager类"><a href="#1-写一个kafka-consumer-manager类" class="headerlink" title="1. 写一个kafka consumer manager类"></a>1. 写一个kafka consumer manager类</h3><ul><li>kafka consumer manager类，用于管理kafka consumer</li><li>找到每个消费者，订阅各自主题</li><li>将任务交给线程池处理</li><li>设置关闭函数</li></ul><h4 id="1-1-kafka-consumer-manager类，用于管理kafka-consumer"><a href="#1-1-kafka-consumer-manager类，用于管理kafka-consumer" class="headerlink" title="1.1 kafka consumer manager类，用于管理kafka consumer"></a>1.1 kafka consumer manager类，用于管理kafka consumer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ConcurrentMap&lt;String, KafkaConsumer&lt;String, KafkaConsumer&gt;&gt; kafkaConsumers;<br><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-meta">@Order(2)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(kafkaConsumers == <span class="hljs-literal">null</span>)&#123;<br>        kafkaConsumers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Reflections</span> <span class="hljs-variable">reflections</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reflections</span>(<span class="hljs-string">&quot;src.main.com.channon.util&quot;</span>);<br>        Set&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">KafkaConsumer</span>&gt;&gt; subTypes = reflections.getSubTypesOf(KafkaConsumer.class);<br>        subTypes.forEach(clazz -&gt; &#123;<br>        <span class="hljs-type">KafkaConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> clazz.getConstructor(Properties.class).newInstance(kafkaConfig.consumerConfigs());<br>            <span class="hljs-comment">// 消费者订阅主题</span><br>            <span class="hljs-comment">// 消费者拉取消息代码交给线程池</span><br>            <span class="hljs-comment">// 设置关闭处理</span><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里创建了一个KafkaConsumerManager类，通过反射获取所有继承了KafkaConsumer的子类，再作处理。</p><h4 id="1-2-消费者订阅各自主题"><a href="#1-2-消费者订阅各自主题" class="headerlink" title="1.2 消费者订阅各自主题"></a>1.2 消费者订阅各自主题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subscribeTopic</span><span class="hljs-params">(Class clazz, KafkaConsumer consumer)</span>&#123;<br>    Set&lt;Map.Entry&lt;String, String&gt;&gt; listener = zookeeperConfig.pathHandlerMap.entrySet();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">configTopic</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(Map.Entry&lt;String, String&gt; entry:listener)&#123;<br>        <span class="hljs-keyword">if</span>(listener.equals(clazz.getName()))&#123;<br>            configTopic = <span class="hljs-literal">true</span>;<br>            consumer.subscribe(Collections.singleton(entry.getKey()));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!configTopic)&#123;<br>        consumer.subscribe(Collections.singleton(kafkaConfig.topic));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    从配置中读取每个消费者对应的主题，如果有单独配置就读取单独配置，如果没有就读取通用配置。这里配置获取方式各有不同，大家可以选择各自的实现方式。唯一需要注意的是， 配置获取的时间应该先于manager init代码运行的时间。</p><h4 id="1-3-将任务交给线程池处理"><a href="#1-3-将任务交给线程池处理" class="headerlink" title="1.3 将任务交给线程池处理"></a>1.3 将任务交给线程池处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">kafkaConsumerPool.addTask(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">synchronized</span> (subscribeLock) &#123;<br>                    <span class="hljs-type">ConsumerRecords</span> <span class="hljs-variable">records</span> <span class="hljs-operator">=</span> consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (WakeupException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            consumer.close();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>​    设置时间，每个消费者隔一段时间会从kafka里拉取消息，consumer交由线程池管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaConsumerPool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService executorService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    KafkaConsumerManager kafkaConsumerManager;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        executorService = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTask</span><span class="hljs-params">(Runnable task)</span>&#123;<br>        executorService.submit(task);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, KafkaConsumer&lt;String, KafkaConsumer&gt;&gt; consumers = kafkaConsumerManager.kafkaConsumers();<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;String, KafkaConsumer&lt;String, KafkaConsumer&gt;&gt; entry : consumers.entrySet())&#123;<br>            entry.getValue().wakeup();<br>        &#125;<br>        executorService.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    上面一段是线程池的代码。需要注意的是，kafka consumer是需要一直在后台运行的，所以最好是设置一个固定线程数的线程池，线程数 &#x3D; 消费者数。</p><p>​    线程池关闭的时候会获取所有的消费者，并调用wakeup()。</p><h5 id="为什么关闭消费者时调用的是wakeup-而不是close-？"><a href="#为什么关闭消费者时调用的是wakeup-而不是close-？" class="headerlink" title="为什么关闭消费者时调用的是wakeup()而不是close()？"></a>为什么关闭消费者时调用的是wakeup()而不是close()？</h5><p>​    wakeup是更轻量也更安全的方法。</p><p>​    轻量：它会将client里的wakeup设置为true，kafka在下一次poll数据时就会读取到wakeup设置，并抛出一个WakeUpException。调用线程更改完变量即可退出，无需等待kafka consumer彻底关闭。</p><p>​    安全： wakeup会在下次poll之前抛出异常，而close可能打断poll的过程，使得缓存区的该批数据丢失，这批数据可能处于未处理、处理中、已处理未提交位移的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// KafkaConsumer源码</span><br><span class="hljs-keyword">private</span> ConsumerRecords&lt;K, V&gt; <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Timer timer, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> includeMetadataInTimeout)</span> &#123;<br>        acquireAndEnsureOpen();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ......<br>            &#125;<br><br>            <span class="hljs-keyword">do</span> &#123;<br>                client.maybeTriggerWakeup(); <span class="hljs-comment">// wakeup会在这里抛出异常</span><br><br>                <span class="hljs-keyword">final</span> Fetch&lt;K, V&gt; fetch = pollForFetches(timer);<br>                <span class="hljs-keyword">if</span> (!fetch.isEmpty()) &#123;<br>                    ......<br><br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.interceptors.onConsume(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerRecords</span>&lt;&gt;(fetch.records()));<br>                &#125;<br>            &#125; <span class="hljs-keyword">while</span> (timer.notExpired());<br><br>            <span class="hljs-keyword">return</span> ConsumerRecords.empty();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            release();<br>            <span class="hljs-built_in">this</span>.kafkaConsumerMetrics.recordPollEnd(timer.currentTimeMs());<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="1-4-设置关闭函数"><a href="#1-4-设置关闭函数" class="headerlink" title="1.4 设置关闭函数"></a>1.4 设置关闭函数</h4><p>在zookeeper util中，我们将关闭函数写在Runtime预留的callback函数里，但这里使用了线程池，所以在线程池中处理关闭即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;String, KafkaConsumer&lt;String, KafkaConsumer&gt;&gt; consumers = kafkaConsumerManager.kafkaConsumers();<br>    <span class="hljs-keyword">for</span>(Map.Entry&lt;String, KafkaConsumer&lt;String, KafkaConsumer&gt;&gt; entry : consumers.entrySet())&#123;<br>        entry.getValue().wakeup();<br>    &#125;<br>    executorService.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-实现一个具体的Kafka-Consumer"><a href="#2-实现一个具体的Kafka-Consumer" class="headerlink" title="2. 实现一个具体的Kafka Consumer"></a>2. 实现一个具体的Kafka Consumer</h3><p>​    子类继承KafkaConsumer即可。对于我们需要的操作，可以通过重写poll函数来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ConsumerRecords&lt;String, Object&gt; <span class="hljs-title function_">poll</span><span class="hljs-params">(Duration timeout)</span> &#123;<br><br>    <span class="hljs-comment">// call KafkaConsumer.poll() to get messages</span><br>    ConsumerRecords&lt;String, Object&gt; records = <span class="hljs-built_in">super</span>.poll(timeout);<br><br>    <span class="hljs-comment">// iterate records, print each message</span><br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, Object&gt; record : records) &#123;<br>        System.out.printf(<span class="hljs-string">&quot;Consumed by %s, topic = %s, partition = %d, offset = %d, key = %s, value = %s \n&quot;</span>,<br>                <span class="hljs-built_in">this</span>.getClass().getName(), record.topic(), record.partition(), record.offset(), record.key(), record.value());<br>    &#125;<br><br>    <span class="hljs-comment">// return records to user</span><br>    <span class="hljs-keyword">return</span> records;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    上文先调用父类的poll函数拉取消息，然后执行我们期望的操作——打印信息，最后返回。</p><p>​    之前提到的close可能随时打断这里的任何操作，如执行完了super.poll，但还没有处理，就关闭了。这就会造成数据丢失。</p><h3 id="3-注册zk监听器，监听zk变化修改consumer订阅的topic"><a href="#3-注册zk监听器，监听zk变化修改consumer订阅的topic" class="headerlink" title="3. 注册zk监听器，监听zk变化修改consumer订阅的topic"></a>3. 注册zk监听器，监听zk变化修改consumer订阅的topic</h3><ul><li>不建议的操作</li><li>zk监听器实现</li><li>并发问题</li></ul><h4 id="3-1-不建议的操作"><a href="#3-1-不建议的操作" class="headerlink" title="3.1 不建议的操作"></a>3.1 不建议的操作</h4><p>我在几次尝试中发现，实时修改kafka consumer订阅的topic是一个非常不好的操作。</p><ol><li><p>kafka重平衡消费者导致信息丢失。consumer修改topic对于kafka是个消费者下线再上线的过程，这就回到了经典的kafka重平衡导致数据丢失问题。</p></li><li><p>kakfa consumer不是并发安全的实现。实时修改kafka consumer会遇到非常难处理的并发冲突，如果需要绝对安全又需要加锁，这会拖慢consumer的执行。</p><p>另外，kafka consumer检查到并发冲突后会抛出异常ConcurrentModificationException，需要妥善处理。</p></li></ol><p>​    我在查找网上方案的时候发现大家有两种实现方法，一种是检测到topic变更，直接close消费者再新建，另一种就是加锁。我选择了加锁实现。</p><h4 id="3-2-zk监听器实现"><a href="#3-2-zk监听器实现" class="headerlink" title="3.2 zk监听器实现"></a>3.2 zk监听器实现</h4><p>​    我们把kafka的topic配置到zookeeper上，写了一个zk listener，当zk node数据变更时就调用kafka consumer变更topic。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaPrintTopicListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IZkDataListener</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDataChange</span><span class="hljs-params">(String dataPath, Object data)</span>&#123;<br>        KafkaConsumerManager manager= ApplicationContextUtil.getBean(KafkaConsumerManager.class);<br>        <span class="hljs-type">KafkaConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> manager.kafkaConsumers().get(PrintConsumer.class.getName());<br>        <span class="hljs-keyword">synchronized</span> (subscribeLock)&#123;<br>            consumer.unsubscribe();<br>            consumer.subscribe(Collections.singleton(data.toString()));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDataDeleted</span><span class="hljs-params">(String dataPath)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​     需要注意的是，这个类作为pojo类，需要使用到bean类KafkaConsumerManager，这涉及bean注入的问题。我在这里选择的实现是，创建一个ApplicationContextUtil，使得程序可以在任意地方通过这个Util获取Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextUtil</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext context;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ApplicationContextUtil</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>        ApplicationContextUtil.context = context;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title function_">getApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> context;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; beanClass)</span> &#123;<br>        <span class="hljs-keyword">return</span> context.getBean(beanClass);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-并发问题"><a href="#3-3-并发问题" class="headerlink" title="3.3 并发问题"></a>3.3 并发问题</h4><p>​    KafkaConsumerManager、KafkaPrintTopicListener和线程池都会对consumer进行更改，而consumer本身是线程不安全的，这里的访问会报错。我的解决方案是，在consumer类中创建一个Object类作为锁对象，对三个地方都加锁。</p><p>​    但是这不是一个优良的实现。如果在修改topic时，线程池的poll操作被阻塞，它就没法完成“定时拉取”的任务了。</p><p>​    另外，解决这个并发冲突的过程也是很有意思的过程。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">如果给两个调用共享变量的地方分别加锁,还是存在并发冲突的可能,原因可能有:<br>1. 两个地方加的锁对象不一样,需要使用同一对象锁才能起到互斥的效果。  <br>  check: 打印输出或日志检查,在加锁的地方打印出锁对象的引用,确认是否是同一个对象。引用地址相同，所以是同一个对象。<br>2. 加锁的范围不够,需要扩大锁的范围,直到包含所有访问共享变量的语句。<br>  check: 扩大到不能再大了……还是不行<br>3. 存在死锁情况,一个线程获取锁A等待锁B,另一个线程获取锁B等待锁A,导致互相等待。<br>  check: 应该不是<br>4. 有其它线程没有加锁也访问了该共享变量。<br>  check: 把其中一处代码注释掉再执行，不报错，所以这条排除。后来发现，是一个线程两处调用，另一个线程一处diao&#x27;yong<br>5. 共享变量没有用volatile关键字修饰,导致缓存同步问题。<br>  check: 没有共享变量，仅访问同一实例<br>6. 异常情况下,锁没有被正常释放.<br>  check: synchronized不需要手动释放<br>7. subscribe后有其它可以修改订阅的方法未加锁,如unsubscribe。<br>  check: 给所有subscribe和unsubscribe都加了锁，还是不行。后来发现poll方法也需要加锁。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反射+泛型 写一个Zookeeper工具类</title>
    <link href="/2023/09/01/20230902-%E5%8F%8D%E5%B0%84+%E6%B3%9B%E5%9E%8B%20%E5%86%99%E4%B8%80%E4%B8%AAZookeeper%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2023/09/01/20230902-%E5%8F%8D%E5%B0%84+%E6%B3%9B%E5%9E%8B%20%E5%86%99%E4%B8%80%E4%B8%AAZookeeper%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>功能简介：</p><ol><li>初始化和关闭</li><li>创建和删除节点</li><li>注册监听器</li></ol><h3 id="1-初始化和关闭"><a href="#1-初始化和关闭" class="headerlink" title="1. 初始化和关闭"></a>1. 初始化和关闭</h3><p>功能要求</p><ul><li>从配置中读取信息</li><li>设置权限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span>(zkClient == <span class="hljs-literal">null</span>)&#123;<br>            zkClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZkClient</span>(zookeeperConfig.connectionString);<br>            zkClient.addAuthInfo(<span class="hljs-string">&quot;digest&quot;</span>, generateAuthInfo());<br>            zkClient.setZkSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerSerializer</span>());<br>            logger.info(<span class="hljs-string">&quot;Connected to ZooKeeper. &quot;</span>);<br>            <span class="hljs-keyword">for</span>(Map.Entry&lt;String, String&gt; entry:zookeeperConfig.pathHandlerMap.entrySet())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> entry.getKey();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">handlerClass</span> <span class="hljs-operator">=</span> entry.getValue();<br>                registeListener(path, handlerClass);<br>            &#125;<br>        &#125;<br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            zkClient.close();<br>            System.out.println(<span class="hljs-string">&quot;Zookeeper Client Closed.&quot;</span>);<br>        &#125;));<br>    &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        logger.error(<span class="hljs-string">&quot;Error initializing ZooKeeper client. &quot;</span>, e);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​    这段代码中，选择将zkClient的初始化交给Spring管理，在容器构造完成之后执行。</p><p>​    同时，监听器的注册逻辑也在这里，注册抛出的异常在注册方法里处理了。</p><p>​    代码最后利用Java的ShutdownHook机制，在JVM退出前新建线程关闭Zookeeper。不建议大量使用这样的钩子，如果大量使用，关闭程序时会创建大量新线程，可能会出现其他错误。</p><h5 id="还有别的初始化的方式吗？"><a href="#还有别的初始化的方式吗？" class="headerlink" title="还有别的初始化的方式吗？"></a>还有别的初始化的方式吗？</h5><p>​    zkClient是单例，也可以通过单例模式+static写初始化代码。但我的参数注入是通过Spring完成的，static执行早于Spring参数注入，如果这么写会报错。</p><p>​    也可通过懒加载的方式，使用的时候再初始化。但这样就无法使用监听器了。</p><h3 id="2-创建和删除节点"><a href="#2-创建和删除节点" class="headerlink" title="2. 创建和删除节点"></a>2. 创建和删除节点</h3><p>功能要求</p><ul><li>创建和删除时先检查父节点是否存在，若不存在，抛出异常</li><li>跟zk连接时进行三次重试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">createNode</span><span class="hljs-params">(String path, String curNode, Object data)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    curNode = adjustmentNodePathUtil(curNode);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">curNodePath</span> <span class="hljs-operator">=</span> path + curNode;<br>    <span class="hljs-keyword">if</span>(!zkClient.exists(path))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Parent node &quot;</span>+ path +<span class="hljs-string">&quot; does not exist&quot;</span>);<br>    &#125;<br>    Map&lt;String, Object&gt; paramMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    paramMap.put(<span class="hljs-string">&quot;curNodePath&quot;</span>, curNodePath);<br>    paramMap.put(<span class="hljs-string">&quot;data&quot;</span>, data);<br>    RetryUtil.RetryResult&lt;Object&gt; result = RetryUtil.executeWithRetry(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RetryUtil</span>.RetryCallback&lt;Object, Map&lt;String, Object&gt;&gt;() &#123;<br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">(Map&lt;String, Object&gt; param)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                zkClient.createPersistent(param.get(<span class="hljs-string">&quot;curNodePath&quot;</span>).toString());<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                <span class="hljs-keyword">throw</span> e;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;, paramMap);<br>    <span class="hljs-keyword">return</span> result.getSuccessState();<br>&#125;<br></code></pre></td></tr></table></figure><p>​    创建节点时先检查父节点是否存在，若不存在则报错。这里最好写一个业务报错，方便使用者对异常进行处理，根据自己需要处理报错，比如创建父节点后重试。</p><p>​    在创建节点时进行了多次重试。由于重试是个通用代码，所以我把它写到了另一个类里，并新建了RetryResult用来封装重试结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,P&gt; RetryResult&lt;T&gt; <span class="hljs-title function_">executeWithRetry</span><span class="hljs-params">(RetryCallback&lt;T,P&gt; callback, P param)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">retryCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-type">Exception</span> <span class="hljs-variable">lastException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; retryCount; i++)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> callback.call(param);<br>            <span class="hljs-keyword">return</span> RetryResult.success(result);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            lastException = e;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> RetryResult.failure(lastException);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    这段代码的使用者仅需在调用时实现RetryCallback接口即可。</p><p>​    删除节点代码类似，不再重复贴出。</p><h3 id="3-注册监听器"><a href="#3-注册监听器" class="headerlink" title="3. 注册监听器"></a>3. 注册监听器</h3><p>功能要求</p><ul><li>对拓展开放，只需实现接口即可实现新的监听</li><li>无需重复注册监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registeListener</span><span class="hljs-params">(String path, String handlerClass)</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-type">IZkDataListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> (IZkDataListener)Class.forName(handlerClass).newInstance();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">absPath</span> <span class="hljs-operator">=</span> prefixNode + adjustmentNodePathUtil(path);<br>        zkClient.subscribeDataChanges(absPath, listener);<br>        listenerMap.put(path, listener);<br>    &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException | InstantiationException | IllegalAccessException e1)&#123;<br>        e1.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   监听注册逻辑。代码通过反射找到IZkDataListener的实现类，一一生成实例并注册。监听器监听的key由ZookeeperConfig配置，可从配置文件中读取。</p><p>  如果需要新增注册器，只需新增一个类，对IZkDataListener进行实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IZkDataListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDataChange</span><span class="hljs-params">(String s, Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(o.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDataDeleted</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;delete: &quot;</span> + s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="为什么这里监听器只需要注册一次"><a href="#为什么这里监听器只需要注册一次" class="headerlink" title="为什么这里监听器只需要注册一次"></a>为什么这里监听器只需要注册一次</h5><p>Zookeeper的watcher是一次触发即失效，这里使用了ZkClient包，封装了监听器，当变更触发以后会自动重新注册。</p><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>​    Java里的Zookeeper客户端有ZkClient和Curator，这里仅使用了ZkClient，它仅对Zookeeper客户端进行了简单的封装，如失败重连，自动重注册watcher等。从网上资料看，Curator是功能更齐全的包，留待以后研究。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
